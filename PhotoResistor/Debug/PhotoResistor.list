
PhotoResistor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005668  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005848  08005848  00006848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e4  080058e4  00007070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080058e4  080058e4  000068e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058ec  080058ec  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ec  080058ec  000068ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058f0  080058f0  000068f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080058f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000070  08005964  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08005964  00007388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012819  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267d  00000000  00000000  000198b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0001bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5f  00000000  00000000  0001ce18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002770f  00000000  00000000  0001d977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c66  00000000  00000000  00045086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001012e9  00000000  00000000  00055cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156fd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004368  00000000  00000000  00157018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0015b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005830 	.word	0x08005830

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005830 	.word	0x08005830

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <calculate_crc8>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t calculate_crc8(const uint8_t *data, size_t length) {
 80005ec:	b480      	push	{r7}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	75fb      	strb	r3, [r7, #23]

    for (size_t i = 0; i < length; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	e022      	b.n	8000646 <calculate_crc8+0x5a>
        crc ^= data[i];
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	4413      	add	r3, r2
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	4053      	eors	r3, r2
 800060c:	75fb      	strb	r3, [r7, #23]
        for (uint8_t bit = 0; bit < 8; bit++) {
 800060e:	2300      	movs	r3, #0
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	e012      	b.n	800063a <calculate_crc8+0x4e>
            if (crc & 0x80) {
 8000614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000618:	2b00      	cmp	r3, #0
 800061a:	da08      	bge.n	800062e <calculate_crc8+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800061c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	b25b      	sxtb	r3, r3
 8000624:	f083 0307 	eor.w	r3, r3, #7
 8000628:	b25b      	sxtb	r3, r3
 800062a:	75fb      	strb	r3, [r7, #23]
 800062c:	e002      	b.n	8000634 <calculate_crc8+0x48>
            } else {
                crc <<= 1;
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	75fb      	strb	r3, [r7, #23]
        for (uint8_t bit = 0; bit < 8; bit++) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3301      	adds	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	2b07      	cmp	r3, #7
 800063e:	d9e9      	bls.n	8000614 <calculate_crc8+0x28>
    for (size_t i = 0; i < length; i++) {
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	3301      	adds	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d3d8      	bcc.n	8000600 <calculate_crc8+0x14>
            }
        }
    }

    return crc;
 800064e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000650:	4618      	mov	r0, r3
 8000652:	371c      	adds	r7, #28
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <get_timestamp>:

uint32_t get_timestamp() {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    /*static uint32_t start_time = 0;
    if (start_time == 0) {
        start_time = HAL_GetTick();
    }
    return HAL_GetTick() - start_time;*/
	return HAL_GetTick();
 8000660:	f000 fd5a 	bl	8001118 <HAL_GetTick>
 8000664:	4603      	mov	r3, r0
}
 8000666:	4618      	mov	r0, r3
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0b8      	sub	sp, #224	@ 0xe0
 8000670:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fced 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f891 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f99f 	bl	80009bc <MX_GPIO_Init>
  MX_ADC1_Init();
 800067e:	f000 f8d9 	bl	8000834 <MX_ADC1_Init>
  MX_UART4_Init();
 8000682:	f000 f94f 	bl	8000924 <MX_UART4_Init>
  uint16_t adc_value;
  char uart_msg[50];
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fb54 	bl	8000d34 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800068c:	2101      	movs	r1, #1
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fb9c 	bl	8000dcc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000694:	4b3b      	ldr	r3, [pc, #236]	@ (8000784 <main+0x118>)
 8000696:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800069a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800069c:	4b39      	ldr	r3, [pc, #228]	@ (8000784 <main+0x118>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006a2:	4b38      	ldr	r3, [pc, #224]	@ (8000784 <main+0x118>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006a8:	4b36      	ldr	r3, [pc, #216]	@ (8000784 <main+0x118>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006ae:	4b35      	ldr	r3, [pc, #212]	@ (8000784 <main+0x118>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006b4:	4933      	ldr	r1, [pc, #204]	@ (8000784 <main+0x118>)
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 fc14 	bl	8000ee4 <BSP_COM_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <main+0x5a>
  {
    Error_Handler();
 80006c2:	f000 f9b7 	bl	8000a34 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t log_index = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 80006cc:	482e      	ldr	r0, [pc, #184]	@ (8000788 <main+0x11c>)
 80006ce:	f001 f967 	bl	80019a0 <HAL_ADC_Start>
	  uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 80006d2:	482d      	ldr	r0, [pc, #180]	@ (8000788 <main+0x11c>)
 80006d4:	f001 fa7b 	bl	8001bce <HAL_ADC_GetValue>
 80006d8:	4603      	mov	r3, r0
 80006da:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
	  HAL_ADC_Stop(&hadc1);
 80006de:	482a      	ldr	r0, [pc, #168]	@ (8000788 <main+0x11c>)
 80006e0:	f001 fa42 	bl	8001b68 <HAL_ADC_Stop>

	      // Process value
	  uint16_t corrected_value = 4095 - adc_value;
 80006e4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80006e8:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80006ec:	330f      	adds	r3, #15
 80006ee:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
	  uint32_t timestamp = get_timestamp();
 80006f2:	f7ff ffb3 	bl	800065c <get_timestamp>
 80006f6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

	      // Format data packet - increased buffer sizes
	  char data_packet[60];  // Increased from 50
	  int packet_len = snprintf(data_packet, sizeof(data_packet),
 80006fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000704:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8000708:	4638      	mov	r0, r7
 800070a:	9202      	str	r2, [sp, #8]
 800070c:	4a1f      	ldr	r2, [pc, #124]	@ (800078c <main+0x120>)
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000714:	9200      	str	r2, [sp, #0]
 8000716:	4a1e      	ldr	r2, [pc, #120]	@ (8000790 <main+0x124>)
 8000718:	213c      	movs	r1, #60	@ 0x3c
 800071a:	f004 fbd5 	bl	8004ec8 <sniprintf>
 800071e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
	                              timestamp,
	                              SENSOR_ID,
	                              corrected_value);

	      // Calculate CRC
	  uint8_t crc = calculate_crc8((uint8_t*)data_packet, packet_len);
 8000722:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8000726:	463b      	mov	r3, r7
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff5e 	bl	80005ec <calculate_crc8>
 8000730:	4603      	mov	r3, r0
 8000732:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

	      // Final packet - increased buffer size
	  char final_packet[70];  // Increased from 60
	  int final_len = snprintf(final_packet, sizeof(final_packet),
 8000736:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800073a:	463a      	mov	r2, r7
 800073c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	4613      	mov	r3, r2
 8000744:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <main+0x128>)
 8000746:	2146      	movs	r1, #70	@ 0x46
 8000748:	f004 fbbe 	bl	8004ec8 <sniprintf>
 800074c:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	                            "[%s]*%02X\r\n",  // Added \r for Windows compatibility
	                            data_packet,
	                            crc);

	      // Transmit with error checking
	  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart4,
 8000750:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000754:	b29a      	uxth	r2, r3
 8000756:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800075a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800075e:	480e      	ldr	r0, [pc, #56]	@ (8000798 <main+0x12c>)
 8000760:	f003 fd06 	bl	8004170 <HAL_UART_Transmit>
 8000764:	4603      	mov	r3, r0
 8000766:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	                                                 (uint8_t*)final_packet,
	                                                 final_len,  // Use final_len instead of strlen
	                                                 HAL_MAX_DELAY);

	  if (status != HAL_OK) {
 800076a:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <main+0x10c>
	          // Handle transmission error (e.g., toggle LED)
		  BSP_LED_Toggle(LED_GREEN);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 fb14 	bl	8000da0 <BSP_LED_Toggle>
	  }

	  HAL_Delay(LOG_INTERVAL_MS);
 8000778:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800077c:	f000 fcd8 	bl	8001130 <HAL_Delay>
  {
 8000780:	e7a4      	b.n	80006cc <main+0x60>
 8000782:	bf00      	nop
 8000784:	2000008c 	.word	0x2000008c
 8000788:	2000009c 	.word	0x2000009c
 800078c:	08005858 	.word	0x08005858
 8000790:	08005848 	.word	0x08005848
 8000794:	08005860 	.word	0x08005860
 8000798:	20000108 	.word	0x20000108

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	2238      	movs	r2, #56	@ 0x38
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fbc2 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007be:	2000      	movs	r0, #0
 80007c0:	f002 fc56 	bl	8003070 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2340      	movs	r3, #64	@ 0x40
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007da:	2304      	movs	r3, #4
 80007dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007de:	2355      	movs	r3, #85	@ 0x55
 80007e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fcf0 	bl	80031d8 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007fe:	f000 f919 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2303      	movs	r3, #3
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f002 ffee 	bl	80037fc <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000826:	f000 f905 	bl	8000a34 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	@ 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	@ 0x30
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2220      	movs	r2, #32
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f004 fb71 	bl	8004f34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000854:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000858:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800085a:	4b30      	ldr	r3, [pc, #192]	@ (800091c <MX_ADC1_Init+0xe8>)
 800085c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000860:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000862:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <MX_ADC1_Init+0xe8>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800086e:	4b2b      	ldr	r3, [pc, #172]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000874:	4b29      	ldr	r3, [pc, #164]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800087a:	4b28      	ldr	r3, [pc, #160]	@ (800091c <MX_ADC1_Init+0xe8>)
 800087c:	2204      	movs	r2, #4
 800087e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000880:	4b26      	ldr	r3, [pc, #152]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000882:	2200      	movs	r2, #0
 8000884:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000886:	4b25      	ldr	r3, [pc, #148]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000888:	2201      	movs	r2, #1
 800088a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800088c:	4b23      	ldr	r3, [pc, #140]	@ (800091c <MX_ADC1_Init+0xe8>)
 800088e:	2201      	movs	r2, #1
 8000890:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000892:	4b22      	ldr	r3, [pc, #136]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <MX_ADC1_Init+0xe8>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008b4:	4b19      	ldr	r3, [pc, #100]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	4817      	ldr	r0, [pc, #92]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008be:	f000 feb3 	bl	8001628 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008c8:	f000 f8b4 	bl	8000a34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	4811      	ldr	r0, [pc, #68]	@ (800091c <MX_ADC1_Init+0xe8>)
 80008d8:	f001 ff9e 	bl	8002818 <HAL_ADCEx_MultiModeConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008e2:	f000 f8a7 	bl	8000a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_ADC1_Init+0xec>)
 80008e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ea:	2306      	movs	r3, #6
 80008ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80008ee:	2302      	movs	r3, #2
 80008f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f2:	237f      	movs	r3, #127	@ 0x7f
 80008f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f6:	2304      	movs	r3, #4
 80008f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	@ (800091c <MX_ADC1_Init+0xe8>)
 8000904:	f001 f970 	bl	8001be8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800090e:	f000 f891 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	@ 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000009c 	.word	0x2000009c
 8000920:	04300002 	.word	0x04300002

08000924 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <MX_UART4_Init+0x90>)
 800092a:	4a23      	ldr	r2, [pc, #140]	@ (80009b8 <MX_UART4_Init+0x94>)
 800092c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_UART4_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_UART4_Init+0x90>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_UART4_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800096c:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <MX_UART4_Init+0x90>)
 800096e:	f003 fbaf 	bl	80040d0 <HAL_UART_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000978:	f000 f85c 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000980:	f004 f9d8 	bl	8004d34 <HAL_UARTEx_SetTxFifoThreshold>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 f853 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <MX_UART4_Init+0x90>)
 8000992:	f004 fa0d 	bl	8004db0 <HAL_UARTEx_SetRxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800099c:	f000 f84a 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_UART4_Init+0x90>)
 80009a2:	f004 f98e 	bl	8004cc2 <HAL_UARTEx_DisableFifoMode>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f000 f842 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000108 	.word	0x20000108
 80009b8:	40004c00 	.word	0x40004c00

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_GPIO_Init+0x74>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a30 <MX_GPIO_Init+0x74>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <MX_GPIO_Init+0x74>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <MX_GPIO_Init+0x74>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <MX_GPIO_Init+0x74>)
 80009e0:	f043 0320 	orr.w	r3, r3, #32
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_GPIO_Init+0x74>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0320 	and.w	r3, r3, #32
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_GPIO_Init+0x74>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <MX_GPIO_Init+0x74>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_GPIO_Init+0x74>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_GPIO_Init+0x74>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <MX_GPIO_Init+0x74>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_GPIO_Init+0x74>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <Error_Handler+0x8>

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a76:	f002 fb9f 	bl	80031b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09e      	sub	sp, #120	@ 0x78
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2254      	movs	r2, #84	@ 0x54
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 fa43 	bl	8004f34 <memset>
  if(hadc->Instance==ADC1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ab6:	d134      	bne.n	8000b22 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ab8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000abc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000abe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ac2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 f8b3 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ad4:	f7ff ffae 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <HAL_ADC_MspInit+0xa4>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000adc:	4a13      	ldr	r2, [pc, #76]	@ (8000b2c <HAL_ADC_MspInit+0xa4>)
 8000ade:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <HAL_ADC_MspInit+0xa4>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <HAL_ADC_MspInit+0xa4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <HAL_ADC_MspInit+0xa4>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_ADC_MspInit+0xa4>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f002 f8f3 	bl	8002d08 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b22:	bf00      	nop
 8000b24:	3778      	adds	r7, #120	@ 0x78
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09e      	sub	sp, #120	@ 0x78
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2254      	movs	r2, #84	@ 0x54
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 f9ef 	bl	8004f34 <memset>
  if(huart->Instance==UART4)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_UART_MspInit+0xa8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d136      	bne.n	8000bce <HAL_UART_MspInit+0x9e>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b60:	2308      	movs	r3, #8
 8000b62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 f861 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b78:	f7ff ff5c 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b80:	4a16      	ldr	r2, [pc, #88]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_UART_MspInit+0xac>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bb0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_UART_MspInit+0xb0>)
 8000bca:	f002 f89d 	bl	8002d08 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	3778      	adds	r7, #120	@ 0x78
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004c00 	.word	0x40004c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000800 	.word	0x48000800

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3a:	f000 fa5b 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f92e 	bl	8000ea8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	@ (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f004 f960 	bl	8004f44 <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20020000 	.word	0x20020000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	2000019c 	.word	0x2000019c
 8000cb8:	20000388 	.word	0x20000388

08000cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce0:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce4:	f7ff ffea 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	@ (8000d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	@ (8000d2c <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f004 f91f 	bl	8004f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d12:	f7ff fcab 	bl	800066c <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   r0, =_estack
 8000d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d24:	080058f4 	.word	0x080058f4
  ldr r2, =_sbss
 8000d28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d2c:	20000388 	.word	0x20000388

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <BSP_LED_Init+0x64>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a15      	ldr	r2, [pc, #84]	@ (8000d98 <BSP_LED_Init+0x64>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <BSP_LED_Init+0x64>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000d56:	2320      	movs	r3, #32
 8000d58:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a0c      	ldr	r2, [pc, #48]	@ (8000d9c <BSP_LED_Init+0x68>)
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	f107 020c 	add.w	r2, r7, #12
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 ffc7 	bl	8002d08 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <BSP_LED_Init+0x68>)
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	2120      	movs	r1, #32
 8000d84:	2200      	movs	r2, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f940 	bl	800300c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	20000004 	.word	0x20000004

08000da0 <BSP_LED_Toggle>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4a06      	ldr	r2, [pc, #24]	@ (8000dc8 <BSP_LED_Toggle+0x28>)
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	2220      	movs	r2, #32
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 f940 	bl	800303c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000004 	.word	0x20000004

08000dcc <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e90 <BSP_PB_Init+0xc4>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e90 <BSP_PB_Init+0xc4>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de8:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <BSP_PB_Init+0xc4>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000df4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10c      	bne.n	8000e22 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4a21      	ldr	r2, [pc, #132]	@ (8000e94 <BSP_PB_Init+0xc8>)
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 ff74 	bl	8002d08 <HAL_GPIO_Init>
 8000e20:	e031      	b.n	8000e86 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000e22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e26:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e94 <BSP_PB_Init+0xc8>)
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	f107 020c 	add.w	r2, r7, #12
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 ff66 	bl	8002d08 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4a15      	ldr	r2, [pc, #84]	@ (8000e98 <BSP_PB_Init+0xcc>)
 8000e42:	441a      	add	r2, r3
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4915      	ldr	r1, [pc, #84]	@ (8000e9c <BSP_PB_Init+0xd0>)
 8000e48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4610      	mov	r0, r2
 8000e50:	f001 ff16 	bl	8002c80 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4a0f      	ldr	r2, [pc, #60]	@ (8000e98 <BSP_PB_Init+0xcc>)
 8000e5a:	1898      	adds	r0, r3, r2
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ea0 <BSP_PB_Init+0xd4>)
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	461a      	mov	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f001 feed 	bl	8002c46 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e6c:	2028      	movs	r0, #40	@ 0x28
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea4 <BSP_PB_Init+0xd8>)
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f001 feb0 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e7e:	2328      	movs	r3, #40	@ 0x28
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fec6 	bl	8002c12 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	200001a0 	.word	0x200001a0
 8000e9c:	08005884 	.word	0x08005884
 8000ea0:	20000010 	.word	0x20000010
 8000ea4:	20000014 	.word	0x20000014

08000ea8 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <BSP_PB_IRQHandler+0x20>)
 8000eb8:	4413      	add	r3, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fef4 	bl	8002ca8 <HAL_EXTI_IRQHandler>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200001a0 	.word	0x200001a0

08000ecc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d903      	bls.n	8000f02 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000efa:	f06f 0301 	mvn.w	r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e018      	b.n	8000f34 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2294      	movs	r2, #148	@ 0x94
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <BSP_COM_Init+0x5c>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f852 	bl	8000fb8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2294      	movs	r2, #148	@ 0x94
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <BSP_COM_Init+0x5c>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f80e 	bl	8000f44 <MX_LPUART1_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000f2e:	f06f 0303 	mvn.w	r3, #3
 8000f32:	e000      	b.n	8000f36 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000f34:	68fb      	ldr	r3, [r7, #12]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001a8 	.word	0x200001a8

08000f44 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_LPUART1_Init+0x60>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	220c      	movs	r2, #12
 8000f62:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	895b      	ldrh	r3, [r3, #10]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	891b      	ldrh	r3, [r3, #8]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	899b      	ldrh	r3, [r3, #12]
 8000f84:	461a      	mov	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f90:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f003 f89c 	bl	80040d0 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000000c 	.word	0x2000000c

08000fa8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff ff8d 	bl	8000ecc <BSP_PB_Callback>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <COM1_MspInit+0x94>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc4:	4a21      	ldr	r2, [pc, #132]	@ (800104c <COM1_MspInit+0x94>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <COM1_MspInit+0x94>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <COM1_MspInit+0x94>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800104c <COM1_MspInit+0x94>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <COM1_MspInit+0x94>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ff0:	4b16      	ldr	r3, [pc, #88]	@ (800104c <COM1_MspInit+0x94>)
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff4:	4a15      	ldr	r2, [pc, #84]	@ (800104c <COM1_MspInit+0x94>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <COM1_MspInit+0x94>)
 8000ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001008:	2304      	movs	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001014:	2301      	movs	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001018:	230c      	movs	r3, #12
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f001 fe6f 	bl	8002d08 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800102a:	2308      	movs	r3, #8
 800102c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001032:	230c      	movs	r3, #12
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001040:	f001 fe62 	bl	8002d08 <HAL_GPIO_Init>
}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	@ 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f001 fdb4 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f80d 	bl	8001080 <HAL_InitTick>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	e001      	b.n	8001076 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001072:	f7ff fce5 	bl	8000a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001076:	79fb      	ldrb	r3, [r7, #7]

}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_InitTick+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d022      	beq.n	80010da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_InitTick+0x6c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_InitTick+0x68>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 fdc0 	bl	8002c2e <HAL_SYSTICK_Config>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10f      	bne.n	80010d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	d809      	bhi.n	80010ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ba:	2200      	movs	r2, #0
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c2:	f001 fd8c 	bl	8002bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <HAL_InitTick+0x70>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e007      	b.n	80010de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e004      	b.n	80010de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e001      	b.n	80010de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000001c 	.word	0x2000001c
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000018 	.word	0x20000018

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_IncTick+0x1c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_IncTick+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4413      	add	r3, r2
 8001102:	4a03      	ldr	r2, [pc, #12]	@ (8001110 <HAL_IncTick+0x1c>)
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	2000023c 	.word	0x2000023c
 8001114:	2000001c 	.word	0x2000001c

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000023c 	.word	0x2000023c

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001148:	d004      	beq.n	8001154 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <HAL_Delay+0x40>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001154:	bf00      	nop
 8001156:	f7ff ffdf 	bl	8001118 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	429a      	cmp	r2, r3
 8001164:	d8f7      	bhi.n	8001156 <HAL_Delay+0x26>
  {
  }
}
 8001166:	bf00      	nop
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000001c 	.word	0x2000001c

08001174 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3360      	adds	r3, #96	@ 0x60
 80011ee:	461a      	mov	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <LL_ADC_SetOffset+0x44>)
 80011fe:	4013      	ands	r3, r2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	4313      	orrs	r3, r2
 800120c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	03fff000 	.word	0x03fff000

08001224 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3360      	adds	r3, #96	@ 0x60
 8001232:	461a      	mov	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3360      	adds	r3, #96	@ 0x60
 8001260:	461a      	mov	r2, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	431a      	orrs	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001286:	b480      	push	{r7}
 8001288:	b087      	sub	sp, #28
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3360      	adds	r3, #96	@ 0x60
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3360      	adds	r3, #96	@ 0x60
 80012cc:	461a      	mov	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	615a      	str	r2, [r3, #20]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3330      	adds	r3, #48	@ 0x30
 8001328:	461a      	mov	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	211f      	movs	r1, #31
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0e9b      	lsrs	r3, r3, #26
 8001350:	f003 011f 	and.w	r1, r3, #31
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	431a      	orrs	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3314      	adds	r3, #20
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0e5b      	lsrs	r3, r3, #25
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	0d1b      	lsrs	r3, r3, #20
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	2107      	movs	r1, #7
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	401a      	ands	r2, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	0d1b      	lsrs	r3, r3, #20
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	431a      	orrs	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0318 	and.w	r3, r3, #24
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <LL_ADC_SetChannelSingleDiff+0x44>)
 80013ec:	40d9      	lsrs	r1, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	400b      	ands	r3, r1
 80013f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f6:	431a      	orrs	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	0007ffff 	.word	0x0007ffff

08001410 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 031f 	and.w	r3, r3, #31
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800143c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6093      	str	r3, [r2, #8]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001464:	d101      	bne.n	800146a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800148c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014b4:	d101      	bne.n	80014ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001500:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001504:	f043 0202 	orr.w	r2, r3, #2
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <LL_ADC_IsEnabled+0x18>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <LL_ADC_IsEnabled+0x1a>
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b02      	cmp	r3, #2
 8001550:	d101      	bne.n	8001556 <LL_ADC_IsDisableOngoing+0x18>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <LL_ADC_IsDisableOngoing+0x1a>
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001578:	f043 0204 	orr.w	r2, r3, #4
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800159c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015a0:	f043 0210 	orr.w	r2, r3, #16
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d101      	bne.n	80015cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ee:	f043 0220 	orr.w	r2, r3, #32
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b08      	cmp	r3, #8
 8001614:	d101      	bne.n	800161a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e1a9      	b.n	8001996 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fa19 	bl	8000a88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fef1 	bl	8001450 <LL_ADC_IsDeepPowerDownEnabled>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fed7 	bl	800142c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff0c 	bl	80014a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d115      	bne.n	80016ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fef0 	bl	8001478 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001698:	4b9c      	ldr	r3, [pc, #624]	@ (800190c <HAL_ADC_Init+0x2e4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	4a9c      	ldr	r2, [pc, #624]	@ (8001910 <HAL_ADC_Init+0x2e8>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	3301      	adds	r3, #1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff feee 	bl	80014a0 <LL_ADC_IsInternalRegulatorEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10d      	bne.n	80016e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff62 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 80016f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 8142 	bne.w	8001984 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 813e 	bne.w	8001984 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001710:	f043 0202 	orr.w	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fefb 	bl	8001518 <LL_ADC_IsEnabled>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d141      	bne.n	80017ac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001730:	d004      	beq.n	800173c <HAL_ADC_Init+0x114>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a77      	ldr	r2, [pc, #476]	@ (8001914 <HAL_ADC_Init+0x2ec>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10f      	bne.n	800175c <HAL_ADC_Init+0x134>
 800173c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001740:	f7ff feea 	bl	8001518 <LL_ADC_IsEnabled>
 8001744:	4604      	mov	r4, r0
 8001746:	4873      	ldr	r0, [pc, #460]	@ (8001914 <HAL_ADC_Init+0x2ec>)
 8001748:	f7ff fee6 	bl	8001518 <LL_ADC_IsEnabled>
 800174c:	4603      	mov	r3, r0
 800174e:	4323      	orrs	r3, r4
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e012      	b.n	8001782 <HAL_ADC_Init+0x15a>
 800175c:	486e      	ldr	r0, [pc, #440]	@ (8001918 <HAL_ADC_Init+0x2f0>)
 800175e:	f7ff fedb 	bl	8001518 <LL_ADC_IsEnabled>
 8001762:	4604      	mov	r4, r0
 8001764:	486d      	ldr	r0, [pc, #436]	@ (800191c <HAL_ADC_Init+0x2f4>)
 8001766:	f7ff fed7 	bl	8001518 <LL_ADC_IsEnabled>
 800176a:	4603      	mov	r3, r0
 800176c:	431c      	orrs	r4, r3
 800176e:	486c      	ldr	r0, [pc, #432]	@ (8001920 <HAL_ADC_Init+0x2f8>)
 8001770:	f7ff fed2 	bl	8001518 <LL_ADC_IsEnabled>
 8001774:	4603      	mov	r3, r0
 8001776:	4323      	orrs	r3, r4
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d012      	beq.n	80017ac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800178e:	d004      	beq.n	800179a <HAL_ADC_Init+0x172>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a5f      	ldr	r2, [pc, #380]	@ (8001914 <HAL_ADC_Init+0x2ec>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_ADC_Init+0x176>
 800179a:	4a62      	ldr	r2, [pc, #392]	@ (8001924 <HAL_ADC_Init+0x2fc>)
 800179c:	e000      	b.n	80017a0 <HAL_ADC_Init+0x178>
 800179e:	4a62      	ldr	r2, [pc, #392]	@ (8001928 <HAL_ADC_Init+0x300>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f7ff fce4 	bl	8001174 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7f5b      	ldrb	r3, [r3, #29]
 80017b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d106      	bne.n	80017e8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017de:	3b01      	subs	r3, #1
 80017e0:	045b      	lsls	r3, r3, #17
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	4b48      	ldr	r3, [pc, #288]	@ (800192c <HAL_ADC_Init+0x304>)
 800180c:	4013      	ands	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	69b9      	ldr	r1, [r7, #24]
 8001814:	430b      	orrs	r3, r1
 8001816:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fee5 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 8001838:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d17f      	bne.n	8001940 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d17c      	bne.n	8001940 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800184a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001852:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001862:	f023 0302 	bic.w	r3, r3, #2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	69b9      	ldr	r1, [r7, #24]
 800186c:	430b      	orrs	r3, r1
 800186e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d017      	beq.n	80018a8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001886:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001890:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6911      	ldr	r1, [r2, #16]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80018a6:	e013      	b.n	80018d0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018cc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d12a      	bne.n	8001930 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018f0:	4311      	orrs	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018fc:	430a      	orrs	r2, r1
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 0201 	orr.w	r2, r2, #1
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	e019      	b.n	8001940 <HAL_ADC_Init+0x318>
 800190c:	20000000 	.word	0x20000000
 8001910:	053e2d63 	.word	0x053e2d63
 8001914:	50000100 	.word	0x50000100
 8001918:	50000400 	.word	0x50000400
 800191c:	50000500 	.word	0x50000500
 8001920:	50000600 	.word	0x50000600
 8001924:	50000300 	.word	0x50000300
 8001928:	50000700 	.word	0x50000700
 800192c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10c      	bne.n	8001962 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f023 010f 	bic.w	r1, r3, #15
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	1e5a      	subs	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001960:	e007      	b.n	8001972 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 020f 	bic.w	r2, r2, #15
 8001970:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001982:	e007      	b.n	8001994 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001988:	f043 0210 	orr.w	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001994:	7ffb      	ldrb	r3, [r7, #31]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	@ 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop

080019a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019b0:	d004      	beq.n	80019bc <HAL_ADC_Start+0x1c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a67      	ldr	r2, [pc, #412]	@ (8001b54 <HAL_ADC_Start+0x1b4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_Start+0x20>
 80019bc:	4b66      	ldr	r3, [pc, #408]	@ (8001b58 <HAL_ADC_Start+0x1b8>)
 80019be:	e000      	b.n	80019c2 <HAL_ADC_Start+0x22>
 80019c0:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <HAL_ADC_Start+0x1bc>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fd24 	bl	8001410 <LL_ADC_GetMultimode>
 80019c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fdf0 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 80b4 	bne.w	8001b44 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Start+0x4a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0af      	b.n	8001b4a <HAL_ADC_Start+0x1aa>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fdf4 	bl	80025e0 <ADC_Enable>
 80019f8:	4603      	mov	r3, r0
 80019fa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 809b 	bne.w	8001b3a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001b54 <HAL_ADC_Start+0x1b4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d009      	beq.n	8001a36 <HAL_ADC_Start+0x96>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a4e      	ldr	r2, [pc, #312]	@ (8001b60 <HAL_ADC_Start+0x1c0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d002      	beq.n	8001a32 <HAL_ADC_Start+0x92>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	e003      	b.n	8001a3a <HAL_ADC_Start+0x9a>
 8001a32:	4b4c      	ldr	r3, [pc, #304]	@ (8001b64 <HAL_ADC_Start+0x1c4>)
 8001a34:	e001      	b.n	8001a3a <HAL_ADC_Start+0x9a>
 8001a36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d002      	beq.n	8001a48 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a60:	d106      	bne.n	8001a70 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a66:	f023 0206 	bic.w	r2, r3, #6
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a6e:	e002      	b.n	8001a76 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	221c      	movs	r2, #28
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a32      	ldr	r2, [pc, #200]	@ (8001b54 <HAL_ADC_Start+0x1b4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_ADC_Start+0x104>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <HAL_ADC_Start+0x1c0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d002      	beq.n	8001aa0 <HAL_ADC_Start+0x100>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e003      	b.n	8001aa8 <HAL_ADC_Start+0x108>
 8001aa0:	4b30      	ldr	r3, [pc, #192]	@ (8001b64 <HAL_ADC_Start+0x1c4>)
 8001aa2:	e001      	b.n	8001aa8 <HAL_ADC_Start+0x108>
 8001aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d008      	beq.n	8001ac2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d002      	beq.n	8001ac2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	2b09      	cmp	r3, #9
 8001ac0:	d114      	bne.n	8001aec <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ad8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fd3d 	bl	8001564 <LL_ADC_REG_StartConversion>
 8001aea:	e02d      	b.n	8001b48 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a15      	ldr	r2, [pc, #84]	@ (8001b54 <HAL_ADC_Start+0x1b4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_ADC_Start+0x176>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a16      	ldr	r2, [pc, #88]	@ (8001b60 <HAL_ADC_Start+0x1c0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d002      	beq.n	8001b12 <HAL_ADC_Start+0x172>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	e003      	b.n	8001b1a <HAL_ADC_Start+0x17a>
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_ADC_Start+0x1c4>)
 8001b14:	e001      	b.n	8001b1a <HAL_ADC_Start+0x17a>
 8001b16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b1a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00f      	beq.n	8001b48 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b38:	e006      	b.n	8001b48 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001b42:	e001      	b.n	8001b48 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	50000100 	.word	0x50000100
 8001b58:	50000300 	.word	0x50000300
 8001b5c:	50000700 	.word	0x50000700
 8001b60:	50000500 	.word	0x50000500
 8001b64:	50000400 	.word	0x50000400

08001b68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_Stop+0x16>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e023      	b.n	8001bc6 <HAL_ADC_Stop+0x5e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b86:	2103      	movs	r1, #3
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fc6d 	bl	8002468 <ADC_ConversionStop>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d111      	bne.n	8001bbc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fdb7 	bl	800270c <ADC_Disable>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0b6      	sub	sp, #216	@ 0xd8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x24>
 8001c06:	2302      	movs	r3, #2
 8001c08:	f000 bc13 	b.w	8002432 <HAL_ADC_ConfigChannel+0x84a>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fccb 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 83f3 	bne.w	800240c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6859      	ldr	r1, [r3, #4]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	f7ff fb70 	bl	8001318 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fcb9 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8001c42:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fcd9 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 8001c50:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 81d9 	bne.w	8002010 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 81d4 	bne.w	8002010 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c70:	d10f      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7ff fb77 	bl	8001370 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fb31 	bl	80012f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001c90:	e00e      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f7ff fb66 	bl	8001370 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fb21 	bl	80012f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695a      	ldr	r2, [r3, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	08db      	lsrs	r3, r3, #3
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d022      	beq.n	8001d18 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6919      	ldr	r1, [r3, #16]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ce2:	f7ff fa7b 	bl	80011dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6919      	ldr	r1, [r3, #16]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f7ff fac7 	bl	8001286 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d102      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x126>
 8001d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0c:	e000      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x128>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	461a      	mov	r2, r3
 8001d12:	f7ff fad3 	bl	80012bc <LL_ADC_SetOffsetSaturation>
 8001d16:	e17b      	b.n	8002010 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fa80 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x15c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fa75 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	f003 021f 	and.w	r2, r3, #31
 8001d42:	e01e      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x19a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fa6a 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e004      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x1b2>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0e9b      	lsrs	r3, r3, #26
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	e018      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1e4>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001db6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e004      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d106      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fa39 	bl	8001250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fa1d 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10a      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x222>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa12 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	0e9b      	lsrs	r3, r3, #26
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	e01e      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x260>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fa07 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001e28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001e30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e004      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x278>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	e018      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x2aa>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001e74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e84:	2320      	movs	r3, #32
 8001e86:	e004      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d106      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f9d6 	bl	8001250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f9ba 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10a      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x2e8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f9af 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	0e9b      	lsrs	r3, r3, #26
 8001eca:	f003 021f 	and.w	r2, r3, #31
 8001ece:	e01e      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x326>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f9a4 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001eee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001efe:	2320      	movs	r3, #32
 8001f00:	e004      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d105      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x33e>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	e016      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x36c>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001f38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001f46:	2320      	movs	r3, #32
 8001f48:	e004      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d106      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2102      	movs	r1, #2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f975 	bl	8001250 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f959 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x3aa>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2103      	movs	r1, #3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f94e 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	e017      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x3da>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2103      	movs	r1, #3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f943 	bl	8001224 <LL_ADC_GetOffsetChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001fae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x3f2>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0e9b      	lsrs	r3, r3, #26
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	e011      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x416>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e003      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	2103      	movs	r1, #3
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f920 	bl	8001250 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fa7f 	bl	8001518 <LL_ADC_IsEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 813d 	bne.w	800229c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	461a      	mov	r2, r3
 8002030:	f7ff f9ca 	bl	80013c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4aa2      	ldr	r2, [pc, #648]	@ (80022c4 <HAL_ADC_ConfigChannel+0x6dc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	f040 812e 	bne.w	800229c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10b      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x480>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0e9b      	lsrs	r3, r3, #26
 8002056:	3301      	adds	r3, #1
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	2b09      	cmp	r3, #9
 800205e:	bf94      	ite	ls
 8002060:	2301      	movls	r3, #1
 8002062:	2300      	movhi	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	e019      	b.n	800209c <HAL_ADC_ConfigChannel+0x4b4>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002078:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800207a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e003      	b.n	800208c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2b09      	cmp	r3, #9
 8002094:	bf94      	ite	ls
 8002096:	2301      	movls	r3, #1
 8002098:	2300      	movhi	r3, #0
 800209a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800209c:	2b00      	cmp	r3, #0
 800209e:	d079      	beq.n	8002194 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x4d4>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e9b      	lsrs	r3, r3, #26
 80020b2:	3301      	adds	r3, #1
 80020b4:	069b      	lsls	r3, r3, #26
 80020b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ba:	e015      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x500>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80020ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	e003      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80020d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	069b      	lsls	r3, r3, #26
 80020e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x520>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0e9b      	lsrs	r3, r3, #26
 80020fa:	3301      	adds	r3, #1
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	e017      	b.n	8002138 <HAL_ADC_ConfigChannel+0x550>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002118:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800211a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	e003      	b.n	800212c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	ea42 0103 	orr.w	r1, r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <HAL_ADC_ConfigChannel+0x576>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	3301      	adds	r3, #1
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	051b      	lsls	r3, r3, #20
 800215c:	e018      	b.n	8002190 <HAL_ADC_ConfigChannel+0x5a8>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800216c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002176:	2320      	movs	r3, #32
 8002178:	e003      	b.n	8002182 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800217a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002190:	430b      	orrs	r3, r1
 8002192:	e07e      	b.n	8002292 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x5c8>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	069b      	lsls	r3, r3, #26
 80021aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ae:	e015      	b.n	80021dc <HAL_ADC_ConfigChannel+0x5f4>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80021be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80021c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e003      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80021cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	069b      	lsls	r3, r3, #26
 80021d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x614>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	3301      	adds	r3, #1
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	e017      	b.n	800222c <HAL_ADC_ConfigChannel+0x644>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	61fb      	str	r3, [r7, #28]
  return result;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e003      	b.n	8002220 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	ea42 0103 	orr.w	r1, r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x670>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	3301      	adds	r3, #1
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	3b1e      	subs	r3, #30
 8002250:	051b      	lsls	r3, r3, #20
 8002252:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002256:	e01b      	b.n	8002290 <HAL_ADC_ConfigChannel+0x6a8>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	613b      	str	r3, [r7, #16]
  return result;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 021f 	and.w	r2, r3, #31
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	3b1e      	subs	r3, #30
 800228a:	051b      	lsls	r3, r3, #20
 800228c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002290:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002296:	4619      	mov	r1, r3
 8002298:	f7ff f86a 	bl	8001370 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_ADC_ConfigChannel+0x6e0>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80be 	beq.w	8002426 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b2:	d004      	beq.n	80022be <HAL_ADC_ConfigChannel+0x6d6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <HAL_ADC_ConfigChannel+0x6e4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d10a      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x6ec>
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <HAL_ADC_ConfigChannel+0x6e8>)
 80022c0:	e009      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x6ee>
 80022c2:	bf00      	nop
 80022c4:	407f0000 	.word	0x407f0000
 80022c8:	80080000 	.word	0x80080000
 80022cc:	50000100 	.word	0x50000100
 80022d0:	50000300 	.word	0x50000300
 80022d4:	4b59      	ldr	r3, [pc, #356]	@ (800243c <HAL_ADC_ConfigChannel+0x854>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe ff72 	bl	80011c0 <LL_ADC_GetCommonPathInternalCh>
 80022dc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a56      	ldr	r2, [pc, #344]	@ (8002440 <HAL_ADC_ConfigChannel+0x858>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_ADC_ConfigChannel+0x70c>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a55      	ldr	r2, [pc, #340]	@ (8002444 <HAL_ADC_ConfigChannel+0x85c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d13a      	bne.n	800236a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d134      	bne.n	800236a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002308:	d005      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x72e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a4e      	ldr	r2, [pc, #312]	@ (8002448 <HAL_ADC_ConfigChannel+0x860>)
 8002310:	4293      	cmp	r3, r2
 8002312:	f040 8085 	bne.w	8002420 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800231e:	d004      	beq.n	800232a <HAL_ADC_ConfigChannel+0x742>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a49      	ldr	r2, [pc, #292]	@ (800244c <HAL_ADC_ConfigChannel+0x864>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x746>
 800232a:	4a49      	ldr	r2, [pc, #292]	@ (8002450 <HAL_ADC_ConfigChannel+0x868>)
 800232c:	e000      	b.n	8002330 <HAL_ADC_ConfigChannel+0x748>
 800232e:	4a43      	ldr	r2, [pc, #268]	@ (800243c <HAL_ADC_ConfigChannel+0x854>)
 8002330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f7fe ff2d 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002340:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <HAL_ADC_ConfigChannel+0x86c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	4a44      	ldr	r2, [pc, #272]	@ (8002458 <HAL_ADC_ConfigChannel+0x870>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800235a:	e002      	b.n	8002362 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3b01      	subs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002368:	e05a      	b.n	8002420 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a3b      	ldr	r2, [pc, #236]	@ (800245c <HAL_ADC_ConfigChannel+0x874>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d125      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11f      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a31      	ldr	r2, [pc, #196]	@ (800244c <HAL_ADC_ConfigChannel+0x864>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d104      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x7ac>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a34      	ldr	r2, [pc, #208]	@ (8002460 <HAL_ADC_ConfigChannel+0x878>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d047      	beq.n	8002424 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800239c:	d004      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x7c0>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a2a      	ldr	r2, [pc, #168]	@ (800244c <HAL_ADC_ConfigChannel+0x864>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x7c4>
 80023a8:	4a29      	ldr	r2, [pc, #164]	@ (8002450 <HAL_ADC_ConfigChannel+0x868>)
 80023aa:	e000      	b.n	80023ae <HAL_ADC_ConfigChannel+0x7c6>
 80023ac:	4a23      	ldr	r2, [pc, #140]	@ (800243c <HAL_ADC_ConfigChannel+0x854>)
 80023ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7fe feee 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023be:	e031      	b.n	8002424 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a27      	ldr	r2, [pc, #156]	@ (8002464 <HAL_ADC_ConfigChannel+0x87c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d12d      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d127      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1c      	ldr	r2, [pc, #112]	@ (800244c <HAL_ADC_ConfigChannel+0x864>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023e8:	d004      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x80c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a17      	ldr	r2, [pc, #92]	@ (800244c <HAL_ADC_ConfigChannel+0x864>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x810>
 80023f4:	4a16      	ldr	r2, [pc, #88]	@ (8002450 <HAL_ADC_ConfigChannel+0x868>)
 80023f6:	e000      	b.n	80023fa <HAL_ADC_ConfigChannel+0x812>
 80023f8:	4a10      	ldr	r2, [pc, #64]	@ (800243c <HAL_ADC_ConfigChannel+0x854>)
 80023fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f7fe fec8 	bl	800119a <LL_ADC_SetCommonPathInternalCh>
 800240a:	e00c      	b.n	8002426 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002410:	f043 0220 	orr.w	r2, r3, #32
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800241e:	e002      	b.n	8002426 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002420:	bf00      	nop
 8002422:	e000      	b.n	8002426 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002424:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800242e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002432:	4618      	mov	r0, r3
 8002434:	37d8      	adds	r7, #216	@ 0xd8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	50000700 	.word	0x50000700
 8002440:	c3210000 	.word	0xc3210000
 8002444:	90c00010 	.word	0x90c00010
 8002448:	50000600 	.word	0x50000600
 800244c:	50000100 	.word	0x50000100
 8002450:	50000300 	.word	0x50000300
 8002454:	20000000 	.word	0x20000000
 8002458:	053e2d63 	.word	0x053e2d63
 800245c:	c7520000 	.word	0xc7520000
 8002460:	50000500 	.word	0x50000500
 8002464:	cb840000 	.word	0xcb840000

08002468 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f898 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8002484:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f8b9 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 8002490:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8098 	beq.w	80025d0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d02a      	beq.n	8002504 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7f5b      	ldrb	r3, [r3, #29]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d126      	bne.n	8002504 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7f1b      	ldrb	r3, [r3, #28]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d122      	bne.n	8002504 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80024be:	2301      	movs	r3, #1
 80024c0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80024c2:	e014      	b.n	80024ee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4a45      	ldr	r2, [pc, #276]	@ (80025dc <ADC_ConversionStop+0x174>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d90d      	bls.n	80024e8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	f043 0210 	orr.w	r2, r3, #16
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e074      	b.n	80025d2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	3301      	adds	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f8:	2b40      	cmp	r3, #64	@ 0x40
 80024fa:	d1e3      	bne.n	80024c4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2240      	movs	r2, #64	@ 0x40
 8002502:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d014      	beq.n	8002534 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f850 	bl	80015b4 <LL_ADC_REG_IsConversionOngoing>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f80d 	bl	800153e <LL_ADC_IsDisableOngoing>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f82c 	bl	800158c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d014      	beq.n	8002564 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f85f 	bl	8001602 <LL_ADC_INJ_IsConversionOngoing>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00c      	beq.n	8002564 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fff5 	bl	800153e <LL_ADC_IsDisableOngoing>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff f83b 	bl	80015da <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d005      	beq.n	8002576 <ADC_ConversionStop+0x10e>
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d105      	bne.n	800257c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002570:	230c      	movs	r3, #12
 8002572:	617b      	str	r3, [r7, #20]
        break;
 8002574:	e005      	b.n	8002582 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002576:	2308      	movs	r3, #8
 8002578:	617b      	str	r3, [r7, #20]
        break;
 800257a:	e002      	b.n	8002582 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800257c:	2304      	movs	r3, #4
 800257e:	617b      	str	r3, [r7, #20]
        break;
 8002580:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002582:	f7fe fdc9 	bl	8001118 <HAL_GetTick>
 8002586:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002588:	e01b      	b.n	80025c2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800258a:	f7fe fdc5 	bl	8001118 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b05      	cmp	r3, #5
 8002596:	d914      	bls.n	80025c2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00d      	beq.n	80025c2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e007      	b.n	80025d2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1dc      	bne.n	800258a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	a33fffff 	.word	0xa33fffff

080025e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe ff91 	bl	8001518 <LL_ADC_IsEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d176      	bne.n	80026ea <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b3c      	ldr	r3, [pc, #240]	@ (80026f4 <ADC_Enable+0x114>)
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00d      	beq.n	8002626 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	f043 0210 	orr.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e062      	b.n	80026ec <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe ff4c 	bl	80014c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002638:	d004      	beq.n	8002644 <ADC_Enable+0x64>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2e      	ldr	r2, [pc, #184]	@ (80026f8 <ADC_Enable+0x118>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <ADC_Enable+0x68>
 8002644:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <ADC_Enable+0x11c>)
 8002646:	e000      	b.n	800264a <ADC_Enable+0x6a>
 8002648:	4b2d      	ldr	r3, [pc, #180]	@ (8002700 <ADC_Enable+0x120>)
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fdb8 	bl	80011c0 <LL_ADC_GetCommonPathInternalCh>
 8002650:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002656:	2b00      	cmp	r3, #0
 8002658:	d013      	beq.n	8002682 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800265a:	4b2a      	ldr	r3, [pc, #168]	@ (8002704 <ADC_Enable+0x124>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	4a29      	ldr	r2, [pc, #164]	@ (8002708 <ADC_Enable+0x128>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002674:	e002      	b.n	800267c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3b01      	subs	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f9      	bne.n	8002676 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002682:	f7fe fd49 	bl	8001118 <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002688:	e028      	b.n	80026dc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe ff42 	bl	8001518 <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d104      	bne.n	80026a4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe ff12 	bl	80014c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026a4:	f7fe fd38 	bl	8001118 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d914      	bls.n	80026dc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d00d      	beq.n	80026dc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c4:	f043 0210 	orr.w	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d1cf      	bne.n	800268a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	8000003f 	.word	0x8000003f
 80026f8:	50000100 	.word	0x50000100
 80026fc:	50000300 	.word	0x50000300
 8002700:	50000700 	.word	0x50000700
 8002704:	20000000 	.word	0x20000000
 8002708:	053e2d63 	.word	0x053e2d63

0800270c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ff10 	bl	800153e <LL_ADC_IsDisableOngoing>
 800271e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fef7 	bl	8001518 <LL_ADC_IsEnabled>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d047      	beq.n	80027c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d144      	bne.n	80027c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030d 	and.w	r3, r3, #13
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10c      	bne.n	800275e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fed1 	bl	80014f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2203      	movs	r2, #3
 8002754:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002756:	f7fe fcdf 	bl	8001118 <HAL_GetTick>
 800275a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800275c:	e029      	b.n	80027b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	f043 0210 	orr.w	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e023      	b.n	80027c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800277a:	f7fe fccd 	bl	8001118 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d914      	bls.n	80027b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e007      	b.n	80027c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1dc      	bne.n	800277a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <LL_ADC_IsEnabled>:
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <LL_ADC_IsEnabled+0x18>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <LL_ADC_IsEnabled+0x1a>
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_REG_IsConversionOngoing>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b04      	cmp	r3, #4
 8002802:	d101      	bne.n	8002808 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b0a1      	sub	sp, #132	@ 0x84
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002832:	2302      	movs	r3, #2
 8002834:	e0e7      	b.n	8002a06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800283e:	2300      	movs	r3, #0
 8002840:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002842:	2300      	movs	r3, #0
 8002844:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800284e:	d102      	bne.n	8002856 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002850:	4b6f      	ldr	r3, [pc, #444]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e009      	b.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d102      	bne.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002860:	4b6d      	ldr	r3, [pc, #436]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	e001      	b.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0be      	b.n	8002a06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ffb0 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 8002890:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ffaa 	bl	80027f0 <LL_ADC_REG_IsConversionOngoing>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 80a0 	bne.w	80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80028a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 809c 	bne.w	80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028b4:	d004      	beq.n	80028c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a55      	ldr	r2, [pc, #340]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028c0:	4b56      	ldr	r3, [pc, #344]	@ (8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028c2:	e000      	b.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028c4:	4b56      	ldr	r3, [pc, #344]	@ (8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80028c6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d04b      	beq.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028e2:	035b      	lsls	r3, r3, #13
 80028e4:	430b      	orrs	r3, r1
 80028e6:	431a      	orrs	r2, r3
 80028e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f4:	d004      	beq.n	8002900 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a45      	ldr	r2, [pc, #276]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10f      	bne.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002900:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002904:	f7ff ff61 	bl	80027ca <LL_ADC_IsEnabled>
 8002908:	4604      	mov	r4, r0
 800290a:	4841      	ldr	r0, [pc, #260]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800290c:	f7ff ff5d 	bl	80027ca <LL_ADC_IsEnabled>
 8002910:	4603      	mov	r3, r0
 8002912:	4323      	orrs	r3, r4
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002920:	483c      	ldr	r0, [pc, #240]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002922:	f7ff ff52 	bl	80027ca <LL_ADC_IsEnabled>
 8002926:	4604      	mov	r4, r0
 8002928:	483b      	ldr	r0, [pc, #236]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800292a:	f7ff ff4e 	bl	80027ca <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	431c      	orrs	r4, r3
 8002932:	483c      	ldr	r0, [pc, #240]	@ (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002934:	f7ff ff49 	bl	80027ca <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	4323      	orrs	r3, r4
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d056      	beq.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800294a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002952:	f023 030f 	bic.w	r3, r3, #15
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	6811      	ldr	r1, [r2, #0]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	6892      	ldr	r2, [r2, #8]
 800295e:	430a      	orrs	r2, r1
 8002960:	431a      	orrs	r2, r3
 8002962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002964:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002966:	e047      	b.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002972:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800297c:	d004      	beq.n	8002988 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a23      	ldr	r2, [pc, #140]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10f      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002988:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800298c:	f7ff ff1d 	bl	80027ca <LL_ADC_IsEnabled>
 8002990:	4604      	mov	r4, r0
 8002992:	481f      	ldr	r0, [pc, #124]	@ (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002994:	f7ff ff19 	bl	80027ca <LL_ADC_IsEnabled>
 8002998:	4603      	mov	r3, r0
 800299a:	4323      	orrs	r3, r4
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e012      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80029a8:	481a      	ldr	r0, [pc, #104]	@ (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029aa:	f7ff ff0e 	bl	80027ca <LL_ADC_IsEnabled>
 80029ae:	4604      	mov	r4, r0
 80029b0:	4819      	ldr	r0, [pc, #100]	@ (8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029b2:	f7ff ff0a 	bl	80027ca <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	431c      	orrs	r4, r3
 80029ba:	481a      	ldr	r0, [pc, #104]	@ (8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029bc:	f7ff ff05 	bl	80027ca <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4323      	orrs	r3, r4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d012      	beq.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80029e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e2:	e009      	b.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80029f6:	e000      	b.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3784      	adds	r7, #132	@ 0x84
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	50000100 	.word	0x50000100
 8002a14:	50000400 	.word	0x50000400
 8002a18:	50000500 	.word	0x50000500
 8002a1c:	50000300 	.word	0x50000300
 8002a20:	50000700 	.word	0x50000700
 8002a24:	50000600 	.word	0x50000600

08002a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <__NVIC_GetPriorityGrouping+0x18>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db0b      	blt.n	8002ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4907      	ldr	r1, [pc, #28]	@ (8002ac4 <__NVIC_EnableIRQ+0x38>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	@ (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	@ 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	@ 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b94:	d301      	bcc.n	8002b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00f      	b.n	8002bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <SysTick_Config+0x40>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ba8:	f7ff ff8e 	bl	8002ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <SysTick_Config+0x40>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb2:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <SysTick_Config+0x40>)
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	e000e010 	.word	0xe000e010

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff29 	bl	8002a28 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bec:	f7ff ff40 	bl	8002a70 <__NVIC_GetPriorityGrouping>
 8002bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff90 	bl	8002b1c <NVIC_EncodePriority>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff5f 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff33 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ffa4 	bl	8002b84 <SysTick_Config>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002c46:	b480      	push	{r7}
 8002c48:	b087      	sub	sp, #28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	605a      	str	r2, [r3, #4]
      break;
 8002c64:	e005      	b.n	8002c72 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c70:	bf00      	nop
  }

  return status;
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e003      	b.n	8002c9c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <HAL_EXTI_IRQHandler+0x5c>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4798      	blx	r3
    }
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40010414 	.word	0x40010414

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d16:	e15a      	b.n	8002fce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 814c 	beq.w	8002fc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d005      	beq.n	8002d48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d130      	bne.n	8002daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d7e:	2201      	movs	r2, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d017      	beq.n	8002de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d123      	bne.n	8002e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	08da      	lsrs	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3208      	adds	r2, #8
 8002dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	220f      	movs	r2, #15
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	6939      	ldr	r1, [r7, #16]
 8002e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0203 	and.w	r2, r3, #3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80a6 	beq.w	8002fc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8002fec <HAL_GPIO_Init+0x2e4>)
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e80:	4a5a      	ldr	r2, [pc, #360]	@ (8002fec <HAL_GPIO_Init+0x2e4>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e88:	4b58      	ldr	r3, [pc, #352]	@ (8002fec <HAL_GPIO_Init+0x2e4>)
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e94:	4a56      	ldr	r2, [pc, #344]	@ (8002ff0 <HAL_GPIO_Init+0x2e8>)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	220f      	movs	r2, #15
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ebe:	d01f      	beq.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff4 <HAL_GPIO_Init+0x2ec>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d019      	beq.n	8002efc <HAL_GPIO_Init+0x1f4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff8 <HAL_GPIO_Init+0x2f0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_GPIO_Init+0x1f0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ffc <HAL_GPIO_Init+0x2f4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_GPIO_Init+0x1ec>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a49      	ldr	r2, [pc, #292]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <HAL_GPIO_Init+0x1e8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a48      	ldr	r2, [pc, #288]	@ (8003004 <HAL_GPIO_Init+0x2fc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_GPIO_Init+0x1e4>
 8002ee8:	2305      	movs	r3, #5
 8002eea:	e00a      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002eec:	2306      	movs	r3, #6
 8002eee:	e008      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	e006      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e004      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e002      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002f00:	2300      	movs	r3, #0
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	f002 0203 	and.w	r2, r2, #3
 8002f08:	0092      	lsls	r2, r2, #2
 8002f0a:	4093      	lsls	r3, r2
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f12:	4937      	ldr	r1, [pc, #220]	@ (8002ff0 <HAL_GPIO_Init+0x2e8>)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f20:	4b39      	ldr	r3, [pc, #228]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f44:	4a30      	ldr	r2, [pc, #192]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f6e:	4a26      	ldr	r2, [pc, #152]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f74:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f98:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fc2:	4a11      	ldr	r2, [pc, #68]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f ae9d 	bne.w	8002d18 <HAL_GPIO_Init+0x10>
  }
}
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	48000400 	.word	0x48000400
 8002ff8:	48000800 	.word	0x48000800
 8002ffc:	48000c00 	.word	0x48000c00
 8003000:	48001000 	.word	0x48001000
 8003004:	48001400 	.word	0x48001400
 8003008:	40010400 	.word	0x40010400

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003028:	e002      	b.n	8003030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4013      	ands	r3, r2
 8003054:	041a      	lsls	r2, r3, #16
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	43d9      	mvns	r1, r3
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	400b      	ands	r3, r1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d141      	bne.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800307e:	4b4b      	ldr	r3, [pc, #300]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308a:	d131      	bne.n	80030f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800308c:	4b47      	ldr	r3, [pc, #284]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003092:	4a46      	ldr	r2, [pc, #280]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800309c:	4b43      	ldr	r3, [pc, #268]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030a4:	4a41      	ldr	r2, [pc, #260]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ac:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2232      	movs	r2, #50	@ 0x32
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	4a3f      	ldr	r2, [pc, #252]	@ (80031b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	0c9b      	lsrs	r3, r3, #18
 80030be:	3301      	adds	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c2:	e002      	b.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ca:	4b38      	ldr	r3, [pc, #224]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d6:	d102      	bne.n	80030de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f2      	bne.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030de:	4b33      	ldr	r3, [pc, #204]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ea:	d158      	bne.n	800319e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e057      	b.n	80031a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030f0:	4b2e      	ldr	r3, [pc, #184]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f6:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003100:	e04d      	b.n	800319e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003108:	d141      	bne.n	800318e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800310a:	4b28      	ldr	r3, [pc, #160]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003116:	d131      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003118:	4b24      	ldr	r3, [pc, #144]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800311e:	4a23      	ldr	r2, [pc, #140]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003128:	4b20      	ldr	r3, [pc, #128]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003130:	4a1e      	ldr	r2, [pc, #120]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003138:	4b1d      	ldr	r3, [pc, #116]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2232      	movs	r2, #50	@ 0x32
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	4a1c      	ldr	r2, [pc, #112]	@ (80031b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800314e:	e002      	b.n	8003156 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003156:	4b15      	ldr	r3, [pc, #84]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003162:	d102      	bne.n	800316a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f2      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003176:	d112      	bne.n	800319e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e011      	b.n	80031a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800317c:	4b0b      	ldr	r3, [pc, #44]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003182:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003188:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800318c:	e007      	b.n	800319e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800318e:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003196:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003198:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800319c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40007000 	.word	0x40007000
 80031b0:	20000000 	.word	0x20000000
 80031b4:	431bde83 	.word	0x431bde83

080031b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a04      	ldr	r2, [pc, #16]	@ (80031d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80031c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031c6:	6093      	str	r3, [r2, #8]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40007000 	.word	0x40007000

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e2fe      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d075      	beq.n	80032e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f6:	4b97      	ldr	r3, [pc, #604]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003200:	4b94      	ldr	r3, [pc, #592]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d102      	bne.n	8003216 <HAL_RCC_OscConfig+0x3e>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d002      	beq.n	800321c <HAL_RCC_OscConfig+0x44>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d10b      	bne.n	8003234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	4b8d      	ldr	r3, [pc, #564]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d05b      	beq.n	80032e0 <HAL_RCC_OscConfig+0x108>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d157      	bne.n	80032e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e2d9      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323c:	d106      	bne.n	800324c <HAL_RCC_OscConfig+0x74>
 800323e:	4b85      	ldr	r3, [pc, #532]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a84      	ldr	r2, [pc, #528]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e01d      	b.n	8003288 <HAL_RCC_OscConfig+0xb0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x98>
 8003256:	4b7f      	ldr	r3, [pc, #508]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7e      	ldr	r2, [pc, #504]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b7c      	ldr	r3, [pc, #496]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7b      	ldr	r2, [pc, #492]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0xb0>
 8003270:	4b78      	ldr	r3, [pc, #480]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a77      	ldr	r2, [pc, #476]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b75      	ldr	r3, [pc, #468]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a74      	ldr	r2, [pc, #464]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fd ff42 	bl	8001118 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fd ff3e 	bl	8001118 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e29e      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0xc0>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fd ff2e 	bl	8001118 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fd ff2a 	bl	8001118 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	@ 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e28a      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d2:	4b60      	ldr	r3, [pc, #384]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0xe8>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d075      	beq.n	80033da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ee:	4b59      	ldr	r3, [pc, #356]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f8:	4b56      	ldr	r3, [pc, #344]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b0c      	cmp	r3, #12
 8003306:	d102      	bne.n	800330e <HAL_RCC_OscConfig+0x136>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d002      	beq.n	8003314 <HAL_RCC_OscConfig+0x13c>
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d11f      	bne.n	8003354 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003314:	4b4f      	ldr	r3, [pc, #316]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x154>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e25d      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b49      	ldr	r3, [pc, #292]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	4946      	ldr	r1, [pc, #280]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003340:	4b45      	ldr	r3, [pc, #276]	@ (8003458 <HAL_RCC_OscConfig+0x280>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fe9b 	bl	8001080 <HAL_InitTick>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d043      	beq.n	80033d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e249      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d023      	beq.n	80033a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335c:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a3c      	ldr	r2, [pc, #240]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd fed6 	bl	8001118 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003370:	f7fd fed2 	bl	8001118 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e232      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003382:	4b34      	ldr	r3, [pc, #208]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338e:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	061b      	lsls	r3, r3, #24
 800339c:	492d      	ldr	r1, [pc, #180]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
 80033a2:	e01a      	b.n	80033da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80033aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fd feb2 	bl	8001118 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b8:	f7fd feae 	bl	8001118 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e20e      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ca:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x1e0>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d041      	beq.n	800346a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d01c      	beq.n	8003428 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b19      	ldr	r3, [pc, #100]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80033f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f4:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fd fe8b 	bl	8001118 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003406:	f7fd fe87 	bl	8001118 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1e7      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003418:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800341a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0ef      	beq.n	8003406 <HAL_RCC_OscConfig+0x22e>
 8003426:	e020      	b.n	800346a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003428:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342e:	4a09      	ldr	r2, [pc, #36]	@ (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fd fe6e 	bl	8001118 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800343e:	e00d      	b.n	800345c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7fd fe6a 	bl	8001118 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d906      	bls.n	800345c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e1ca      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800345c:	4b8c      	ldr	r3, [pc, #560]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1ea      	bne.n	8003440 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80a6 	beq.w	80035c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003478:	2300      	movs	r3, #0
 800347a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800347c:	4b84      	ldr	r3, [pc, #528]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_OscConfig+0x2b4>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x2b6>
 800348c:	2300      	movs	r3, #0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003492:	4b7f      	ldr	r3, [pc, #508]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003496:	4a7e      	ldr	r2, [pc, #504]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349c:	6593      	str	r3, [r2, #88]	@ 0x58
 800349e:	4b7c      	ldr	r3, [pc, #496]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034aa:	2301      	movs	r3, #1
 80034ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ae:	4b79      	ldr	r3, [pc, #484]	@ (8003694 <HAL_RCC_OscConfig+0x4bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d118      	bne.n	80034ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ba:	4b76      	ldr	r3, [pc, #472]	@ (8003694 <HAL_RCC_OscConfig+0x4bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a75      	ldr	r2, [pc, #468]	@ (8003694 <HAL_RCC_OscConfig+0x4bc>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c6:	f7fd fe27 	bl	8001118 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ce:	f7fd fe23 	bl	8001118 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e183      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003694 <HAL_RCC_OscConfig+0x4bc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_RCC_OscConfig+0x32e>
 80034f4:	4b66      	ldr	r3, [pc, #408]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	4a65      	ldr	r2, [pc, #404]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003504:	e024      	b.n	8003550 <HAL_RCC_OscConfig+0x378>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b05      	cmp	r3, #5
 800350c:	d110      	bne.n	8003530 <HAL_RCC_OscConfig+0x358>
 800350e:	4b60      	ldr	r3, [pc, #384]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	4a5e      	ldr	r2, [pc, #376]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800351e:	4b5c      	ldr	r3, [pc, #368]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003524:	4a5a      	ldr	r2, [pc, #360]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800352e:	e00f      	b.n	8003550 <HAL_RCC_OscConfig+0x378>
 8003530:	4b57      	ldr	r3, [pc, #348]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a56      	ldr	r2, [pc, #344]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003540:	4b53      	ldr	r3, [pc, #332]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	4a52      	ldr	r2, [pc, #328]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d016      	beq.n	8003586 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fd fdde 	bl	8001118 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fd fdda 	bl	8001118 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e138      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003576:	4b46      	ldr	r3, [pc, #280]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ed      	beq.n	8003560 <HAL_RCC_OscConfig+0x388>
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fd fdc7 	bl	8001118 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fd fdc3 	bl	8001118 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e121      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ed      	bne.n	800358e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b35      	ldr	r3, [pc, #212]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	4a34      	ldr	r2, [pc, #208]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d03c      	beq.n	800364a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01c      	beq.n	8003612 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035de:	4a2c      	ldr	r2, [pc, #176]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fd fd96 	bl	8001118 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f0:	f7fd fd92 	bl	8001118 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0f2      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003602:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <HAL_RCC_OscConfig+0x418>
 8003610:	e01b      	b.n	800364a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003612:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003618:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fd fd79 	bl	8001118 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800362a:	f7fd fd75 	bl	8001118 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0d5      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800363c:	4b14      	ldr	r3, [pc, #80]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 800363e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1ef      	bne.n	800362a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80c9 	beq.w	80037e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003654:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b0c      	cmp	r3, #12
 800365e:	f000 8083 	beq.w	8003768 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d15e      	bne.n	8003728 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a08      	ldr	r2, [pc, #32]	@ (8003690 <HAL_RCC_OscConfig+0x4b8>)
 8003670:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fd fd4f 	bl	8001118 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367c:	e00c      	b.n	8003698 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367e:	f7fd fd4b 	bl	8001118 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d905      	bls.n	8003698 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0ab      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
 8003690:	40021000 	.word	0x40021000
 8003694:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003698:	4b55      	ldr	r3, [pc, #340]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ec      	bne.n	800367e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a4:	4b52      	ldr	r3, [pc, #328]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	4b52      	ldr	r3, [pc, #328]	@ (80037f4 <HAL_RCC_OscConfig+0x61c>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6a11      	ldr	r1, [r2, #32]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036b4:	3a01      	subs	r2, #1
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	4311      	orrs	r1, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036be:	0212      	lsls	r2, r2, #8
 80036c0:	4311      	orrs	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036c6:	0852      	lsrs	r2, r2, #1
 80036c8:	3a01      	subs	r2, #1
 80036ca:	0552      	lsls	r2, r2, #21
 80036cc:	4311      	orrs	r1, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036d2:	0852      	lsrs	r2, r2, #1
 80036d4:	3a01      	subs	r2, #1
 80036d6:	0652      	lsls	r2, r2, #25
 80036d8:	4311      	orrs	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036de:	06d2      	lsls	r2, r2, #27
 80036e0:	430a      	orrs	r2, r1
 80036e2:	4943      	ldr	r1, [pc, #268]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e8:	4b41      	ldr	r3, [pc, #260]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a40      	ldr	r2, [pc, #256]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 80036ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036f4:	4b3e      	ldr	r3, [pc, #248]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a3d      	ldr	r2, [pc, #244]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 80036fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd fd0a 	bl	8001118 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fd fd06 	bl	8001118 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e066      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	4b35      	ldr	r3, [pc, #212]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x530>
 8003726:	e05e      	b.n	80037e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003728:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a30      	ldr	r2, [pc, #192]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 800372e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fd fcf0 	bl	8001118 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7fd fcec 	bl	8001118 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e04c      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374e:	4b28      	ldr	r3, [pc, #160]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800375a:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	4924      	ldr	r1, [pc, #144]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 8003760:	4b25      	ldr	r3, [pc, #148]	@ (80037f8 <HAL_RCC_OscConfig+0x620>)
 8003762:	4013      	ands	r3, r2
 8003764:	60cb      	str	r3, [r1, #12]
 8003766:	e03e      	b.n	80037e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e039      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003774:	4b1e      	ldr	r3, [pc, #120]	@ (80037f0 <HAL_RCC_OscConfig+0x618>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0203 	and.w	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	429a      	cmp	r2, r3
 8003786:	d12c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	3b01      	subs	r3, #1
 8003794:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d123      	bne.n	80037e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d11b      	bne.n	80037e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d113      	bne.n	80037e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	019f800c 	.word	0x019f800c
 80037f8:	feeefffc 	.word	0xfeeefffc

080037fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e11e      	b.n	8003a52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003814:	4b91      	ldr	r3, [pc, #580]	@ (8003a5c <HAL_RCC_ClockConfig+0x260>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d910      	bls.n	8003844 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b8e      	ldr	r3, [pc, #568]	@ (8003a5c <HAL_RCC_ClockConfig+0x260>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 020f 	bic.w	r2, r3, #15
 800382a:	498c      	ldr	r1, [pc, #560]	@ (8003a5c <HAL_RCC_ClockConfig+0x260>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b8a      	ldr	r3, [pc, #552]	@ (8003a5c <HAL_RCC_ClockConfig+0x260>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e106      	b.n	8003a52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d073      	beq.n	8003938 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d129      	bne.n	80038ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003858:	4b81      	ldr	r3, [pc, #516]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0f4      	b.n	8003a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003868:	f000 f99e 	bl	8003ba8 <RCC_GetSysClockFreqFromPLLSource>
 800386c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4a7c      	ldr	r2, [pc, #496]	@ (8003a64 <HAL_RCC_ClockConfig+0x268>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d93f      	bls.n	80038f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003876:	4b7a      	ldr	r3, [pc, #488]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800388a:	2b00      	cmp	r3, #0
 800388c:	d033      	beq.n	80038f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003892:	2b00      	cmp	r3, #0
 8003894:	d12f      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003896:	4b72      	ldr	r3, [pc, #456]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800389e:	4a70      	ldr	r2, [pc, #448]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 80038a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e024      	b.n	80038f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0c6      	b.n	8003a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c4:	4b66      	ldr	r3, [pc, #408]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0be      	b.n	8003a52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038d4:	f000 f8ce 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4a61      	ldr	r2, [pc, #388]	@ (8003a64 <HAL_RCC_ClockConfig+0x268>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d909      	bls.n	80038f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 80038ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4957      	ldr	r1, [pc, #348]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003908:	f7fd fc06 	bl	8001118 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	e00a      	b.n	8003926 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003910:	f7fd fc02 	bl	8001118 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e095      	b.n	8003a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	4b4e      	ldr	r3, [pc, #312]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 020c 	and.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	429a      	cmp	r2, r3
 8003936:	d1eb      	bne.n	8003910 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d023      	beq.n	800398c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003950:	4b43      	ldr	r3, [pc, #268]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a42      	ldr	r2, [pc, #264]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800395a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003968:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003970:	4a3b      	ldr	r2, [pc, #236]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003972:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003976:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b39      	ldr	r3, [pc, #228]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4936      	ldr	r1, [pc, #216]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
 800398a:	e008      	b.n	800399e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b80      	cmp	r3, #128	@ 0x80
 8003990:	d105      	bne.n	800399e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003992:	4b33      	ldr	r3, [pc, #204]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4a32      	ldr	r2, [pc, #200]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800399c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800399e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a5c <HAL_RCC_ClockConfig+0x260>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d21d      	bcs.n	80039e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ac:	4b2b      	ldr	r3, [pc, #172]	@ (8003a5c <HAL_RCC_ClockConfig+0x260>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 020f 	bic.w	r2, r3, #15
 80039b4:	4929      	ldr	r1, [pc, #164]	@ (8003a5c <HAL_RCC_ClockConfig+0x260>)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039bc:	f7fd fbac 	bl	8001118 <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fd fba8 	bl	8001118 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e03b      	b.n	8003a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <HAL_RCC_ClockConfig+0x260>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d1ed      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4917      	ldr	r1, [pc, #92]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a12:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	490f      	ldr	r1, [pc, #60]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a26:	f000 f825 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a60 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	490c      	ldr	r1, [pc, #48]	@ (8003a68 <HAL_RCC_ClockConfig+0x26c>)
 8003a38:	5ccb      	ldrb	r3, [r1, r3]
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <HAL_RCC_ClockConfig+0x270>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a46:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <HAL_RCC_ClockConfig+0x274>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fb18 	bl	8001080 <HAL_InitTick>
 8003a50:	4603      	mov	r3, r0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40021000 	.word	0x40021000
 8003a64:	04c4b400 	.word	0x04c4b400
 8003a68:	0800586c 	.word	0x0800586c
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	20000018 	.word	0x20000018

08003a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a86:	4b2a      	ldr	r3, [pc, #168]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e047      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a8c:	4b27      	ldr	r3, [pc, #156]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d102      	bne.n	8003a9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a98:	4b26      	ldr	r3, [pc, #152]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	e03e      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a9e:	4b23      	ldr	r3, [pc, #140]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d136      	bne.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aaa:	4b20      	ldr	r3, [pc, #128]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	4a16      	ldr	r2, [pc, #88]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad2:	68d2      	ldr	r2, [r2, #12]
 8003ad4:	0a12      	lsrs	r2, r2, #8
 8003ad6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]
      break;
 8003ae0:	e00c      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ae2:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	4a10      	ldr	r2, [pc, #64]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aec:	68d2      	ldr	r2, [r2, #12]
 8003aee:	0a12      	lsrs	r2, r2, #8
 8003af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
      break;
 8003afa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	0e5b      	lsrs	r3, r3, #25
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	3301      	adds	r3, #1
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e001      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b1c:	693b      	ldr	r3, [r7, #16]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	00f42400 	.word	0x00f42400
 8003b34:	016e3600 	.word	0x016e3600

08003b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000000 	.word	0x20000000

08003b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b54:	f7ff fff0 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	0a1b      	lsrs	r3, r3, #8
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4904      	ldr	r1, [pc, #16]	@ (8003b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	0800587c 	.word	0x0800587c

08003b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b80:	f7ff ffda 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0adb      	lsrs	r3, r3, #11
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4904      	ldr	r1, [pc, #16]	@ (8003ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	0800587c 	.word	0x0800587c

08003ba8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bae:	4b1e      	ldr	r3, [pc, #120]	@ (8003c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d10c      	bne.n	8003be6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bcc:	4a17      	ldr	r2, [pc, #92]	@ (8003c2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	4a14      	ldr	r2, [pc, #80]	@ (8003c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bd6:	68d2      	ldr	r2, [r2, #12]
 8003bd8:	0a12      	lsrs	r2, r2, #8
 8003bda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]
    break;
 8003be4:	e00c      	b.n	8003c00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003be6:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	4a0e      	ldr	r2, [pc, #56]	@ (8003c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bf0:	68d2      	ldr	r2, [r2, #12]
 8003bf2:	0a12      	lsrs	r2, r2, #8
 8003bf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
    break;
 8003bfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c00:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	0e5b      	lsrs	r3, r3, #25
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c1a:	687b      	ldr	r3, [r7, #4]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	016e3600 	.word	0x016e3600
 8003c30:	00f42400 	.word	0x00f42400

08003c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c40:	2300      	movs	r3, #0
 8003c42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8098 	beq.w	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b43      	ldr	r3, [pc, #268]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10d      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	4b40      	ldr	r3, [pc, #256]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	4a3f      	ldr	r2, [pc, #252]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a39      	ldr	r2, [pc, #228]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c8a:	f7fd fa45 	bl	8001118 <HAL_GetTick>
 8003c8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c90:	e009      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fd fa41 	bl	8001118 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d902      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ca4:	e005      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca6:	4b30      	ldr	r3, [pc, #192]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ef      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d159      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01e      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d019      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd4:	4b23      	ldr	r3, [pc, #140]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ce0:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d00:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd fa01 	bl	8001118 <HAL_GetTick>
 8003d16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d18:	e00b      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fd f9fd 	bl	8001118 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d902      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d30:	e006      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d32:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ec      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d46:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d54:	4903      	ldr	r1, [pc, #12]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d5c:	e008      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	74bb      	strb	r3, [r7, #18]
 8003d62:	e005      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d70:	7c7b      	ldrb	r3, [r7, #17]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d105      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4ba7      	ldr	r3, [pc, #668]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	4aa6      	ldr	r2, [pc, #664]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8e:	4ba1      	ldr	r3, [pc, #644]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f023 0203 	bic.w	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	499d      	ldr	r1, [pc, #628]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003db0:	4b98      	ldr	r3, [pc, #608]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db6:	f023 020c 	bic.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	4995      	ldr	r1, [pc, #596]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dd2:	4b90      	ldr	r3, [pc, #576]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	498c      	ldr	r1, [pc, #560]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df4:	4b87      	ldr	r3, [pc, #540]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	4984      	ldr	r1, [pc, #528]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e16:	4b7f      	ldr	r3, [pc, #508]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	497b      	ldr	r1, [pc, #492]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e38:	4b76      	ldr	r3, [pc, #472]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	4973      	ldr	r1, [pc, #460]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	496a      	ldr	r1, [pc, #424]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e7c:	4b65      	ldr	r3, [pc, #404]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4962      	ldr	r1, [pc, #392]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	4959      	ldr	r1, [pc, #356]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ec0:	4b54      	ldr	r3, [pc, #336]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	4951      	ldr	r1, [pc, #324]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	4948      	ldr	r1, [pc, #288]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f04:	4b43      	ldr	r3, [pc, #268]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	4940      	ldr	r1, [pc, #256]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f22:	d105      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f24:	4b3b      	ldr	r3, [pc, #236]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a3a      	ldr	r2, [pc, #232]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d015      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f3c:	4b35      	ldr	r3, [pc, #212]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4a:	4932      	ldr	r1, [pc, #200]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a2c      	ldr	r2, [pc, #176]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f74:	4b27      	ldr	r3, [pc, #156]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	4924      	ldr	r1, [pc, #144]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f94:	4b1f      	ldr	r3, [pc, #124]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a1e      	ldr	r2, [pc, #120]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d015      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fba:	4916      	ldr	r1, [pc, #88]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a10      	ldr	r2, [pc, #64]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d019      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	4908      	ldr	r1, [pc, #32]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004002:	d109      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a02      	ldr	r2, [pc, #8]	@ (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400e:	60d3      	str	r3, [r2, #12]
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004024:	4b29      	ldr	r3, [pc, #164]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	4926      	ldr	r1, [pc, #152]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004042:	d105      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004044:	4b21      	ldr	r3, [pc, #132]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a20      	ldr	r2, [pc, #128]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800404e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d015      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800405c:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406a:	4918      	ldr	r1, [pc, #96]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407a:	d105      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a12      	ldr	r2, [pc, #72]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004086:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004094:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800409a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a2:	490a      	ldr	r1, [pc, #40]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a04      	ldr	r2, [pc, #16]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80040ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e042      	b.n	8004168 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fc fd1b 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2224      	movs	r2, #36	@ 0x24
 80040fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fbb2 	bl	8004884 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f8b3 	bl	800428c <UART_SetConfig>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e01b      	b.n	8004168 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800413e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800414e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fc31 	bl	80049c8 <UART_CheckIdleState>
 8004166:	4603      	mov	r3, r0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	2b20      	cmp	r3, #32
 8004188:	d17b      	bne.n	8004282 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_UART_Transmit+0x26>
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e074      	b.n	8004284 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2221      	movs	r2, #33	@ 0x21
 80041a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041aa:	f7fc ffb5 	bl	8001118 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c8:	d108      	bne.n	80041dc <HAL_UART_Transmit+0x6c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e003      	b.n	80041e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041e4:	e030      	b.n	8004248 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	2180      	movs	r1, #128	@ 0x80
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fc93 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e03d      	b.n	8004284 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3302      	adds	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e007      	b.n	8004236 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1c8      	bne.n	80041e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	2140      	movs	r1, #64	@ 0x40
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fc5c 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e006      	b.n	8004284 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b08c      	sub	sp, #48	@ 0x30
 8004292:	af00      	add	r7, sp, #0
 8004294:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4baa      	ldr	r3, [pc, #680]	@ (8004564 <UART_SetConfig+0x2d8>)
 80042bc:	4013      	ands	r3, r2
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a9f      	ldr	r2, [pc, #636]	@ (8004568 <UART_SetConfig+0x2dc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f4:	4313      	orrs	r3, r2
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004302:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800430c:	430b      	orrs	r3, r1
 800430e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	f023 010f 	bic.w	r1, r3, #15
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a90      	ldr	r2, [pc, #576]	@ (800456c <UART_SetConfig+0x2e0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d125      	bne.n	800437c <UART_SetConfig+0xf0>
 8004330:	4b8f      	ldr	r3, [pc, #572]	@ (8004570 <UART_SetConfig+0x2e4>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b03      	cmp	r3, #3
 800433c:	d81a      	bhi.n	8004374 <UART_SetConfig+0xe8>
 800433e:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <UART_SetConfig+0xb8>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004355 	.word	0x08004355
 8004348:	08004365 	.word	0x08004365
 800434c:	0800435d 	.word	0x0800435d
 8004350:	0800436d 	.word	0x0800436d
 8004354:	2301      	movs	r3, #1
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435a:	e116      	b.n	800458a <UART_SetConfig+0x2fe>
 800435c:	2302      	movs	r3, #2
 800435e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004362:	e112      	b.n	800458a <UART_SetConfig+0x2fe>
 8004364:	2304      	movs	r3, #4
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436a:	e10e      	b.n	800458a <UART_SetConfig+0x2fe>
 800436c:	2308      	movs	r3, #8
 800436e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004372:	e10a      	b.n	800458a <UART_SetConfig+0x2fe>
 8004374:	2310      	movs	r3, #16
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437a:	e106      	b.n	800458a <UART_SetConfig+0x2fe>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a7c      	ldr	r2, [pc, #496]	@ (8004574 <UART_SetConfig+0x2e8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d138      	bne.n	80043f8 <UART_SetConfig+0x16c>
 8004386:	4b7a      	ldr	r3, [pc, #488]	@ (8004570 <UART_SetConfig+0x2e4>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b0c      	cmp	r3, #12
 8004392:	d82d      	bhi.n	80043f0 <UART_SetConfig+0x164>
 8004394:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <UART_SetConfig+0x110>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	080043f1 	.word	0x080043f1
 80043a8:	080043f1 	.word	0x080043f1
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	080043f1 	.word	0x080043f1
 80043b4:	080043f1 	.word	0x080043f1
 80043b8:	080043f1 	.word	0x080043f1
 80043bc:	080043d9 	.word	0x080043d9
 80043c0:	080043f1 	.word	0x080043f1
 80043c4:	080043f1 	.word	0x080043f1
 80043c8:	080043f1 	.word	0x080043f1
 80043cc:	080043e9 	.word	0x080043e9
 80043d0:	2300      	movs	r3, #0
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d6:	e0d8      	b.n	800458a <UART_SetConfig+0x2fe>
 80043d8:	2302      	movs	r3, #2
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043de:	e0d4      	b.n	800458a <UART_SetConfig+0x2fe>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e6:	e0d0      	b.n	800458a <UART_SetConfig+0x2fe>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ee:	e0cc      	b.n	800458a <UART_SetConfig+0x2fe>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043f6:	e0c8      	b.n	800458a <UART_SetConfig+0x2fe>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004578 <UART_SetConfig+0x2ec>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d125      	bne.n	800444e <UART_SetConfig+0x1c2>
 8004402:	4b5b      	ldr	r3, [pc, #364]	@ (8004570 <UART_SetConfig+0x2e4>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800440c:	2b30      	cmp	r3, #48	@ 0x30
 800440e:	d016      	beq.n	800443e <UART_SetConfig+0x1b2>
 8004410:	2b30      	cmp	r3, #48	@ 0x30
 8004412:	d818      	bhi.n	8004446 <UART_SetConfig+0x1ba>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d00a      	beq.n	800442e <UART_SetConfig+0x1a2>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d814      	bhi.n	8004446 <UART_SetConfig+0x1ba>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <UART_SetConfig+0x19a>
 8004420:	2b10      	cmp	r3, #16
 8004422:	d008      	beq.n	8004436 <UART_SetConfig+0x1aa>
 8004424:	e00f      	b.n	8004446 <UART_SetConfig+0x1ba>
 8004426:	2300      	movs	r3, #0
 8004428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442c:	e0ad      	b.n	800458a <UART_SetConfig+0x2fe>
 800442e:	2302      	movs	r3, #2
 8004430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004434:	e0a9      	b.n	800458a <UART_SetConfig+0x2fe>
 8004436:	2304      	movs	r3, #4
 8004438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443c:	e0a5      	b.n	800458a <UART_SetConfig+0x2fe>
 800443e:	2308      	movs	r3, #8
 8004440:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004444:	e0a1      	b.n	800458a <UART_SetConfig+0x2fe>
 8004446:	2310      	movs	r3, #16
 8004448:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444c:	e09d      	b.n	800458a <UART_SetConfig+0x2fe>
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a4a      	ldr	r2, [pc, #296]	@ (800457c <UART_SetConfig+0x2f0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d125      	bne.n	80044a4 <UART_SetConfig+0x218>
 8004458:	4b45      	ldr	r3, [pc, #276]	@ (8004570 <UART_SetConfig+0x2e4>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004462:	2bc0      	cmp	r3, #192	@ 0xc0
 8004464:	d016      	beq.n	8004494 <UART_SetConfig+0x208>
 8004466:	2bc0      	cmp	r3, #192	@ 0xc0
 8004468:	d818      	bhi.n	800449c <UART_SetConfig+0x210>
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d00a      	beq.n	8004484 <UART_SetConfig+0x1f8>
 800446e:	2b80      	cmp	r3, #128	@ 0x80
 8004470:	d814      	bhi.n	800449c <UART_SetConfig+0x210>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <UART_SetConfig+0x1f0>
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d008      	beq.n	800448c <UART_SetConfig+0x200>
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x210>
 800447c:	2300      	movs	r3, #0
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e082      	b.n	800458a <UART_SetConfig+0x2fe>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e07e      	b.n	800458a <UART_SetConfig+0x2fe>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e07a      	b.n	800458a <UART_SetConfig+0x2fe>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e076      	b.n	800458a <UART_SetConfig+0x2fe>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a2:	e072      	b.n	800458a <UART_SetConfig+0x2fe>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a35      	ldr	r2, [pc, #212]	@ (8004580 <UART_SetConfig+0x2f4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d12a      	bne.n	8004504 <UART_SetConfig+0x278>
 80044ae:	4b30      	ldr	r3, [pc, #192]	@ (8004570 <UART_SetConfig+0x2e4>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044bc:	d01a      	beq.n	80044f4 <UART_SetConfig+0x268>
 80044be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c2:	d81b      	bhi.n	80044fc <UART_SetConfig+0x270>
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c8:	d00c      	beq.n	80044e4 <UART_SetConfig+0x258>
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d815      	bhi.n	80044fc <UART_SetConfig+0x270>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <UART_SetConfig+0x250>
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d8:	d008      	beq.n	80044ec <UART_SetConfig+0x260>
 80044da:	e00f      	b.n	80044fc <UART_SetConfig+0x270>
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e2:	e052      	b.n	800458a <UART_SetConfig+0x2fe>
 80044e4:	2302      	movs	r3, #2
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ea:	e04e      	b.n	800458a <UART_SetConfig+0x2fe>
 80044ec:	2304      	movs	r3, #4
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f2:	e04a      	b.n	800458a <UART_SetConfig+0x2fe>
 80044f4:	2308      	movs	r3, #8
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fa:	e046      	b.n	800458a <UART_SetConfig+0x2fe>
 80044fc:	2310      	movs	r3, #16
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004502:	e042      	b.n	800458a <UART_SetConfig+0x2fe>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a17      	ldr	r2, [pc, #92]	@ (8004568 <UART_SetConfig+0x2dc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d13a      	bne.n	8004584 <UART_SetConfig+0x2f8>
 800450e:	4b18      	ldr	r3, [pc, #96]	@ (8004570 <UART_SetConfig+0x2e4>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004518:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800451c:	d01a      	beq.n	8004554 <UART_SetConfig+0x2c8>
 800451e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004522:	d81b      	bhi.n	800455c <UART_SetConfig+0x2d0>
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004528:	d00c      	beq.n	8004544 <UART_SetConfig+0x2b8>
 800452a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452e:	d815      	bhi.n	800455c <UART_SetConfig+0x2d0>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <UART_SetConfig+0x2b0>
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004538:	d008      	beq.n	800454c <UART_SetConfig+0x2c0>
 800453a:	e00f      	b.n	800455c <UART_SetConfig+0x2d0>
 800453c:	2300      	movs	r3, #0
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004542:	e022      	b.n	800458a <UART_SetConfig+0x2fe>
 8004544:	2302      	movs	r3, #2
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454a:	e01e      	b.n	800458a <UART_SetConfig+0x2fe>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004552:	e01a      	b.n	800458a <UART_SetConfig+0x2fe>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455a:	e016      	b.n	800458a <UART_SetConfig+0x2fe>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004562:	e012      	b.n	800458a <UART_SetConfig+0x2fe>
 8004564:	cfff69f3 	.word	0xcfff69f3
 8004568:	40008000 	.word	0x40008000
 800456c:	40013800 	.word	0x40013800
 8004570:	40021000 	.word	0x40021000
 8004574:	40004400 	.word	0x40004400
 8004578:	40004800 	.word	0x40004800
 800457c:	40004c00 	.word	0x40004c00
 8004580:	40005000 	.word	0x40005000
 8004584:	2310      	movs	r3, #16
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4aae      	ldr	r2, [pc, #696]	@ (8004848 <UART_SetConfig+0x5bc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	f040 8097 	bne.w	80046c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004596:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800459a:	2b08      	cmp	r3, #8
 800459c:	d823      	bhi.n	80045e6 <UART_SetConfig+0x35a>
 800459e:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <UART_SetConfig+0x318>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045d7 	.word	0x080045d7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080045e7 	.word	0x080045e7
 80045c4:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7ff fac2 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 80045cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b9e      	ldr	r3, [pc, #632]	@ (800484c <UART_SetConfig+0x5c0>)
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7ff fa4d 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 80045da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8130 	beq.w	800485a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	4a94      	ldr	r2, [pc, #592]	@ (8004850 <UART_SetConfig+0x5c4>)
 8004600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004604:	461a      	mov	r2, r3
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	fbb3 f3f2 	udiv	r3, r3, r2
 800460c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	429a      	cmp	r2, r3
 800461c:	d305      	bcc.n	800462a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	429a      	cmp	r2, r3
 8004628:	d903      	bls.n	8004632 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004630:	e113      	b.n	800485a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	2200      	movs	r2, #0
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	60fa      	str	r2, [r7, #12]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	4a84      	ldr	r2, [pc, #528]	@ (8004850 <UART_SetConfig+0x5c4>)
 8004640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004644:	b29b      	uxth	r3, r3
 8004646:	2200      	movs	r2, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004650:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004654:	f7fb fe34 	bl	80002c0 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	020b      	lsls	r3, r1, #8
 800466a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800466e:	0202      	lsls	r2, r0, #8
 8004670:	6979      	ldr	r1, [r7, #20]
 8004672:	6849      	ldr	r1, [r1, #4]
 8004674:	0849      	lsrs	r1, r1, #1
 8004676:	2000      	movs	r0, #0
 8004678:	460c      	mov	r4, r1
 800467a:	4605      	mov	r5, r0
 800467c:	eb12 0804 	adds.w	r8, r2, r4
 8004680:	eb43 0905 	adc.w	r9, r3, r5
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	469a      	mov	sl, r3
 800468c:	4693      	mov	fp, r2
 800468e:	4652      	mov	r2, sl
 8004690:	465b      	mov	r3, fp
 8004692:	4640      	mov	r0, r8
 8004694:	4649      	mov	r1, r9
 8004696:	f7fb fe13 	bl	80002c0 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4613      	mov	r3, r2
 80046a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a8:	d308      	bcc.n	80046bc <UART_SetConfig+0x430>
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b0:	d204      	bcs.n	80046bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a3a      	ldr	r2, [r7, #32]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	e0ce      	b.n	800485a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046c2:	e0ca      	b.n	800485a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046cc:	d166      	bne.n	800479c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80046ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d827      	bhi.n	8004726 <UART_SetConfig+0x49a>
 80046d6:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <UART_SetConfig+0x450>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	08004701 	.word	0x08004701
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004711 	.word	0x08004711
 80046e8:	08004727 	.word	0x08004727
 80046ec:	08004717 	.word	0x08004717
 80046f0:	08004727 	.word	0x08004727
 80046f4:	08004727 	.word	0x08004727
 80046f8:	08004727 	.word	0x08004727
 80046fc:	0800471f 	.word	0x0800471f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004700:	f7ff fa26 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 8004704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004706:	e014      	b.n	8004732 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7ff fa38 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800470e:	e010      	b.n	8004732 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004710:	4b4e      	ldr	r3, [pc, #312]	@ (800484c <UART_SetConfig+0x5c0>)
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004714:	e00d      	b.n	8004732 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004716:	f7ff f9ad 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 800471a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800471c:	e009      	b.n	8004732 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004724:	e005      	b.n	8004732 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004730:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8090 	beq.w	800485a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	4a44      	ldr	r2, [pc, #272]	@ (8004850 <UART_SetConfig+0x5c4>)
 8004740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004744:	461a      	mov	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	fbb3 f3f2 	udiv	r3, r3, r2
 800474c:	005a      	lsls	r2, r3, #1
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	441a      	add	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	d916      	bls.n	8004794 <UART_SetConfig+0x508>
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476c:	d212      	bcs.n	8004794 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f023 030f 	bic.w	r3, r3, #15
 8004776:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	b29a      	uxth	r2, r3
 8004784:	8bfb      	ldrh	r3, [r7, #30]
 8004786:	4313      	orrs	r3, r2
 8004788:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	8bfa      	ldrh	r2, [r7, #30]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e062      	b.n	800485a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800479a:	e05e      	b.n	800485a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800479c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d828      	bhi.n	80047f6 <UART_SetConfig+0x56a>
 80047a4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <UART_SetConfig+0x520>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047e1 	.word	0x080047e1
 80047b8:	080047f7 	.word	0x080047f7
 80047bc:	080047e7 	.word	0x080047e7
 80047c0:	080047f7 	.word	0x080047f7
 80047c4:	080047f7 	.word	0x080047f7
 80047c8:	080047f7 	.word	0x080047f7
 80047cc:	080047ef 	.word	0x080047ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d0:	f7ff f9be 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 80047d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047d6:	e014      	b.n	8004802 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d8:	f7ff f9d0 	bl	8003b7c <HAL_RCC_GetPCLK2Freq>
 80047dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047de:	e010      	b.n	8004802 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e0:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <UART_SetConfig+0x5c0>)
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047e4:	e00d      	b.n	8004802 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e6:	f7ff f945 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 80047ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ec:	e009      	b.n	8004802 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047f4:	e005      	b.n	8004802 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004800:	bf00      	nop
    }

    if (pclk != 0U)
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d028      	beq.n	800485a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	4a10      	ldr	r2, [pc, #64]	@ (8004850 <UART_SetConfig+0x5c4>)
 800480e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004812:	461a      	mov	r2, r3
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	fbb3 f2f2 	udiv	r2, r3, r2
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	441a      	add	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d910      	bls.n	8004854 <UART_SetConfig+0x5c8>
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004838:	d20c      	bcs.n	8004854 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	b29a      	uxth	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e009      	b.n	800485a <UART_SetConfig+0x5ce>
 8004846:	bf00      	nop
 8004848:	40008000 	.word	0x40008000
 800484c:	00f42400 	.word	0x00f42400
 8004850:	08005888 	.word	0x08005888
      }
      else
      {
        ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2201      	movs	r2, #1
 800485e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2201      	movs	r2, #1
 8004866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2200      	movs	r2, #0
 8004874:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004876:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800487a:	4618      	mov	r0, r3
 800487c:	3730      	adds	r7, #48	@ 0x30
 800487e:	46bd      	mov	sp, r7
 8004880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01a      	beq.n	800499a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004982:	d10a      	bne.n	800499a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b098      	sub	sp, #96	@ 0x60
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049d8:	f7fc fb9e 	bl	8001118 <HAL_GetTick>
 80049dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d12f      	bne.n	8004a4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f4:	2200      	movs	r2, #0
 80049f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f88e 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d022      	beq.n	8004a4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e6      	bne.n	8004a06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e063      	b.n	8004b14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d149      	bne.n	8004aee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a62:	2200      	movs	r2, #0
 8004a64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f857 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d03c      	beq.n	8004aee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	623b      	str	r3, [r7, #32]
   return(result);
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e6      	bne.n	8004a74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac6:	61fa      	str	r2, [r7, #28]
 8004ac8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	69b9      	ldr	r1, [r7, #24]
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e5      	bne.n	8004aa6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e012      	b.n	8004b14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3758      	adds	r7, #88	@ 0x58
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2c:	e04f      	b.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b34:	d04b      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fc faef 	bl	8001118 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e04e      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d037      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b80      	cmp	r3, #128	@ 0x80
 8004b62:	d034      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b40      	cmp	r3, #64	@ 0x40
 8004b68:	d031      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d110      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f838 	bl	8004bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e029      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ba8:	d111      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f81e 	bl	8004bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e00f      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d0a0      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b095      	sub	sp, #84	@ 0x54
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e6      	bne.n	8004bfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e3      	bne.n	8004c30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d118      	bne.n	8004ca2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6979      	ldr	r1, [r7, #20]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e6      	bne.n	8004c70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004cb6:	bf00      	nop
 8004cb8:	3754      	adds	r7, #84	@ 0x54
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e027      	b.n	8004d28 <HAL_UARTEx_DisableFifoMode+0x66>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2224      	movs	r2, #36	@ 0x24
 8004ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004d06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e02d      	b.n	8004da8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2224      	movs	r2, #36	@ 0x24
 8004d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f84f 	bl	8004e2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e02d      	b.n	8004e24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2224      	movs	r2, #36	@ 0x24
 8004dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f811 	bl	8004e2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d108      	bne.n	8004e4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e4c:	e031      	b.n	8004eb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e4e:	2308      	movs	r3, #8
 8004e50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e52:	2308      	movs	r3, #8
 8004e54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	0e5b      	lsrs	r3, r3, #25
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	0f5b      	lsrs	r3, r3, #29
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
 8004e78:	7b3a      	ldrb	r2, [r7, #12]
 8004e7a:	4911      	ldr	r1, [pc, #68]	@ (8004ec0 <UARTEx_SetNbDataToProcess+0x94>)
 8004e7c:	5c8a      	ldrb	r2, [r1, r2]
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e82:	7b3a      	ldrb	r2, [r7, #12]
 8004e84:	490f      	ldr	r1, [pc, #60]	@ (8004ec4 <UARTEx_SetNbDataToProcess+0x98>)
 8004e86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	7b7a      	ldrb	r2, [r7, #13]
 8004e98:	4909      	ldr	r1, [pc, #36]	@ (8004ec0 <UARTEx_SetNbDataToProcess+0x94>)
 8004e9a:	5c8a      	ldrb	r2, [r1, r2]
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ea0:	7b7a      	ldrb	r2, [r7, #13]
 8004ea2:	4908      	ldr	r1, [pc, #32]	@ (8004ec4 <UARTEx_SetNbDataToProcess+0x98>)
 8004ea4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ea6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	080058a0 	.word	0x080058a0
 8004ec4:	080058a8 	.word	0x080058a8

08004ec8 <sniprintf>:
 8004ec8:	b40c      	push	{r2, r3}
 8004eca:	b530      	push	{r4, r5, lr}
 8004ecc:	4b18      	ldr	r3, [pc, #96]	@ (8004f30 <sniprintf+0x68>)
 8004ece:	1e0c      	subs	r4, r1, #0
 8004ed0:	681d      	ldr	r5, [r3, #0]
 8004ed2:	b09d      	sub	sp, #116	@ 0x74
 8004ed4:	da08      	bge.n	8004ee8 <sniprintf+0x20>
 8004ed6:	238b      	movs	r3, #139	@ 0x8b
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ede:	b01d      	add	sp, #116	@ 0x74
 8004ee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ee4:	b002      	add	sp, #8
 8004ee6:	4770      	bx	lr
 8004ee8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004eec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004ef6:	bf14      	ite	ne
 8004ef8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004efc:	4623      	moveq	r3, r4
 8004efe:	9304      	str	r3, [sp, #16]
 8004f00:	9307      	str	r3, [sp, #28]
 8004f02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f06:	9002      	str	r0, [sp, #8]
 8004f08:	9006      	str	r0, [sp, #24]
 8004f0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f0e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f10:	ab21      	add	r3, sp, #132	@ 0x84
 8004f12:	a902      	add	r1, sp, #8
 8004f14:	4628      	mov	r0, r5
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	f000 f994 	bl	8005244 <_svfiprintf_r>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	bfbc      	itt	lt
 8004f20:	238b      	movlt	r3, #139	@ 0x8b
 8004f22:	602b      	strlt	r3, [r5, #0]
 8004f24:	2c00      	cmp	r4, #0
 8004f26:	d0da      	beq.n	8004ede <sniprintf+0x16>
 8004f28:	9b02      	ldr	r3, [sp, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e7d6      	b.n	8004ede <sniprintf+0x16>
 8004f30:	20000020 	.word	0x20000020

08004f34 <memset>:
 8004f34:	4402      	add	r2, r0
 8004f36:	4603      	mov	r3, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <__errno>:
 8004f44:	4b01      	ldr	r3, [pc, #4]	@ (8004f4c <__errno+0x8>)
 8004f46:	6818      	ldr	r0, [r3, #0]
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000020 	.word	0x20000020

08004f50 <__libc_init_array>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4d0d      	ldr	r5, [pc, #52]	@ (8004f88 <__libc_init_array+0x38>)
 8004f54:	4c0d      	ldr	r4, [pc, #52]	@ (8004f8c <__libc_init_array+0x3c>)
 8004f56:	1b64      	subs	r4, r4, r5
 8004f58:	10a4      	asrs	r4, r4, #2
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	42a6      	cmp	r6, r4
 8004f5e:	d109      	bne.n	8004f74 <__libc_init_array+0x24>
 8004f60:	4d0b      	ldr	r5, [pc, #44]	@ (8004f90 <__libc_init_array+0x40>)
 8004f62:	4c0c      	ldr	r4, [pc, #48]	@ (8004f94 <__libc_init_array+0x44>)
 8004f64:	f000 fc64 	bl	8005830 <_init>
 8004f68:	1b64      	subs	r4, r4, r5
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	2600      	movs	r6, #0
 8004f6e:	42a6      	cmp	r6, r4
 8004f70:	d105      	bne.n	8004f7e <__libc_init_array+0x2e>
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f78:	4798      	blx	r3
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7ee      	b.n	8004f5c <__libc_init_array+0xc>
 8004f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f82:	4798      	blx	r3
 8004f84:	3601      	adds	r6, #1
 8004f86:	e7f2      	b.n	8004f6e <__libc_init_array+0x1e>
 8004f88:	080058ec 	.word	0x080058ec
 8004f8c:	080058ec 	.word	0x080058ec
 8004f90:	080058ec 	.word	0x080058ec
 8004f94:	080058f0 	.word	0x080058f0

08004f98 <__retarget_lock_acquire_recursive>:
 8004f98:	4770      	bx	lr

08004f9a <__retarget_lock_release_recursive>:
 8004f9a:	4770      	bx	lr

08004f9c <_free_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d041      	beq.n	8005028 <_free_r+0x8c>
 8004fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa8:	1f0c      	subs	r4, r1, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfb8      	it	lt
 8004fae:	18e4      	addlt	r4, r4, r3
 8004fb0:	f000 f8e0 	bl	8005174 <__malloc_lock>
 8004fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800502c <_free_r+0x90>)
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	b933      	cbnz	r3, 8004fc8 <_free_r+0x2c>
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	6014      	str	r4, [r2, #0]
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fc4:	f000 b8dc 	b.w	8005180 <__malloc_unlock>
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	d908      	bls.n	8004fde <_free_r+0x42>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	1821      	adds	r1, r4, r0
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	bf01      	itttt	eq
 8004fd4:	6819      	ldreq	r1, [r3, #0]
 8004fd6:	685b      	ldreq	r3, [r3, #4]
 8004fd8:	1809      	addeq	r1, r1, r0
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	e7ed      	b.n	8004fba <_free_r+0x1e>
 8004fde:	461a      	mov	r2, r3
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b10b      	cbz	r3, 8004fe8 <_free_r+0x4c>
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d9fa      	bls.n	8004fde <_free_r+0x42>
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	1850      	adds	r0, r2, r1
 8004fec:	42a0      	cmp	r0, r4
 8004fee:	d10b      	bne.n	8005008 <_free_r+0x6c>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	4401      	add	r1, r0
 8004ff4:	1850      	adds	r0, r2, r1
 8004ff6:	4283      	cmp	r3, r0
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	d1e0      	bne.n	8004fbe <_free_r+0x22>
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	6053      	str	r3, [r2, #4]
 8005002:	4408      	add	r0, r1
 8005004:	6010      	str	r0, [r2, #0]
 8005006:	e7da      	b.n	8004fbe <_free_r+0x22>
 8005008:	d902      	bls.n	8005010 <_free_r+0x74>
 800500a:	230c      	movs	r3, #12
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	e7d6      	b.n	8004fbe <_free_r+0x22>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	1821      	adds	r1, r4, r0
 8005014:	428b      	cmp	r3, r1
 8005016:	bf04      	itt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	6063      	str	r3, [r4, #4]
 800501e:	bf04      	itt	eq
 8005020:	1809      	addeq	r1, r1, r0
 8005022:	6021      	streq	r1, [r4, #0]
 8005024:	6054      	str	r4, [r2, #4]
 8005026:	e7ca      	b.n	8004fbe <_free_r+0x22>
 8005028:	bd38      	pop	{r3, r4, r5, pc}
 800502a:	bf00      	nop
 800502c:	20000384 	.word	0x20000384

08005030 <sbrk_aligned>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	4e0f      	ldr	r6, [pc, #60]	@ (8005070 <sbrk_aligned+0x40>)
 8005034:	460c      	mov	r4, r1
 8005036:	6831      	ldr	r1, [r6, #0]
 8005038:	4605      	mov	r5, r0
 800503a:	b911      	cbnz	r1, 8005042 <sbrk_aligned+0x12>
 800503c:	f000 fba4 	bl	8005788 <_sbrk_r>
 8005040:	6030      	str	r0, [r6, #0]
 8005042:	4621      	mov	r1, r4
 8005044:	4628      	mov	r0, r5
 8005046:	f000 fb9f 	bl	8005788 <_sbrk_r>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d103      	bne.n	8005056 <sbrk_aligned+0x26>
 800504e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005052:	4620      	mov	r0, r4
 8005054:	bd70      	pop	{r4, r5, r6, pc}
 8005056:	1cc4      	adds	r4, r0, #3
 8005058:	f024 0403 	bic.w	r4, r4, #3
 800505c:	42a0      	cmp	r0, r4
 800505e:	d0f8      	beq.n	8005052 <sbrk_aligned+0x22>
 8005060:	1a21      	subs	r1, r4, r0
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fb90 	bl	8005788 <_sbrk_r>
 8005068:	3001      	adds	r0, #1
 800506a:	d1f2      	bne.n	8005052 <sbrk_aligned+0x22>
 800506c:	e7ef      	b.n	800504e <sbrk_aligned+0x1e>
 800506e:	bf00      	nop
 8005070:	20000380 	.word	0x20000380

08005074 <_malloc_r>:
 8005074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005078:	1ccd      	adds	r5, r1, #3
 800507a:	f025 0503 	bic.w	r5, r5, #3
 800507e:	3508      	adds	r5, #8
 8005080:	2d0c      	cmp	r5, #12
 8005082:	bf38      	it	cc
 8005084:	250c      	movcc	r5, #12
 8005086:	2d00      	cmp	r5, #0
 8005088:	4606      	mov	r6, r0
 800508a:	db01      	blt.n	8005090 <_malloc_r+0x1c>
 800508c:	42a9      	cmp	r1, r5
 800508e:	d904      	bls.n	800509a <_malloc_r+0x26>
 8005090:	230c      	movs	r3, #12
 8005092:	6033      	str	r3, [r6, #0]
 8005094:	2000      	movs	r0, #0
 8005096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800509a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005170 <_malloc_r+0xfc>
 800509e:	f000 f869 	bl	8005174 <__malloc_lock>
 80050a2:	f8d8 3000 	ldr.w	r3, [r8]
 80050a6:	461c      	mov	r4, r3
 80050a8:	bb44      	cbnz	r4, 80050fc <_malloc_r+0x88>
 80050aa:	4629      	mov	r1, r5
 80050ac:	4630      	mov	r0, r6
 80050ae:	f7ff ffbf 	bl	8005030 <sbrk_aligned>
 80050b2:	1c43      	adds	r3, r0, #1
 80050b4:	4604      	mov	r4, r0
 80050b6:	d158      	bne.n	800516a <_malloc_r+0xf6>
 80050b8:	f8d8 4000 	ldr.w	r4, [r8]
 80050bc:	4627      	mov	r7, r4
 80050be:	2f00      	cmp	r7, #0
 80050c0:	d143      	bne.n	800514a <_malloc_r+0xd6>
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	d04b      	beq.n	800515e <_malloc_r+0xea>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	4639      	mov	r1, r7
 80050ca:	4630      	mov	r0, r6
 80050cc:	eb04 0903 	add.w	r9, r4, r3
 80050d0:	f000 fb5a 	bl	8005788 <_sbrk_r>
 80050d4:	4581      	cmp	r9, r0
 80050d6:	d142      	bne.n	800515e <_malloc_r+0xea>
 80050d8:	6821      	ldr	r1, [r4, #0]
 80050da:	1a6d      	subs	r5, r5, r1
 80050dc:	4629      	mov	r1, r5
 80050de:	4630      	mov	r0, r6
 80050e0:	f7ff ffa6 	bl	8005030 <sbrk_aligned>
 80050e4:	3001      	adds	r0, #1
 80050e6:	d03a      	beq.n	800515e <_malloc_r+0xea>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	442b      	add	r3, r5
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	f8d8 3000 	ldr.w	r3, [r8]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	bb62      	cbnz	r2, 8005150 <_malloc_r+0xdc>
 80050f6:	f8c8 7000 	str.w	r7, [r8]
 80050fa:	e00f      	b.n	800511c <_malloc_r+0xa8>
 80050fc:	6822      	ldr	r2, [r4, #0]
 80050fe:	1b52      	subs	r2, r2, r5
 8005100:	d420      	bmi.n	8005144 <_malloc_r+0xd0>
 8005102:	2a0b      	cmp	r2, #11
 8005104:	d917      	bls.n	8005136 <_malloc_r+0xc2>
 8005106:	1961      	adds	r1, r4, r5
 8005108:	42a3      	cmp	r3, r4
 800510a:	6025      	str	r5, [r4, #0]
 800510c:	bf18      	it	ne
 800510e:	6059      	strne	r1, [r3, #4]
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	bf08      	it	eq
 8005114:	f8c8 1000 	streq.w	r1, [r8]
 8005118:	5162      	str	r2, [r4, r5]
 800511a:	604b      	str	r3, [r1, #4]
 800511c:	4630      	mov	r0, r6
 800511e:	f000 f82f 	bl	8005180 <__malloc_unlock>
 8005122:	f104 000b 	add.w	r0, r4, #11
 8005126:	1d23      	adds	r3, r4, #4
 8005128:	f020 0007 	bic.w	r0, r0, #7
 800512c:	1ac2      	subs	r2, r0, r3
 800512e:	bf1c      	itt	ne
 8005130:	1a1b      	subne	r3, r3, r0
 8005132:	50a3      	strne	r3, [r4, r2]
 8005134:	e7af      	b.n	8005096 <_malloc_r+0x22>
 8005136:	6862      	ldr	r2, [r4, #4]
 8005138:	42a3      	cmp	r3, r4
 800513a:	bf0c      	ite	eq
 800513c:	f8c8 2000 	streq.w	r2, [r8]
 8005140:	605a      	strne	r2, [r3, #4]
 8005142:	e7eb      	b.n	800511c <_malloc_r+0xa8>
 8005144:	4623      	mov	r3, r4
 8005146:	6864      	ldr	r4, [r4, #4]
 8005148:	e7ae      	b.n	80050a8 <_malloc_r+0x34>
 800514a:	463c      	mov	r4, r7
 800514c:	687f      	ldr	r7, [r7, #4]
 800514e:	e7b6      	b.n	80050be <_malloc_r+0x4a>
 8005150:	461a      	mov	r2, r3
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	42a3      	cmp	r3, r4
 8005156:	d1fb      	bne.n	8005150 <_malloc_r+0xdc>
 8005158:	2300      	movs	r3, #0
 800515a:	6053      	str	r3, [r2, #4]
 800515c:	e7de      	b.n	800511c <_malloc_r+0xa8>
 800515e:	230c      	movs	r3, #12
 8005160:	6033      	str	r3, [r6, #0]
 8005162:	4630      	mov	r0, r6
 8005164:	f000 f80c 	bl	8005180 <__malloc_unlock>
 8005168:	e794      	b.n	8005094 <_malloc_r+0x20>
 800516a:	6005      	str	r5, [r0, #0]
 800516c:	e7d6      	b.n	800511c <_malloc_r+0xa8>
 800516e:	bf00      	nop
 8005170:	20000384 	.word	0x20000384

08005174 <__malloc_lock>:
 8005174:	4801      	ldr	r0, [pc, #4]	@ (800517c <__malloc_lock+0x8>)
 8005176:	f7ff bf0f 	b.w	8004f98 <__retarget_lock_acquire_recursive>
 800517a:	bf00      	nop
 800517c:	2000037c 	.word	0x2000037c

08005180 <__malloc_unlock>:
 8005180:	4801      	ldr	r0, [pc, #4]	@ (8005188 <__malloc_unlock+0x8>)
 8005182:	f7ff bf0a 	b.w	8004f9a <__retarget_lock_release_recursive>
 8005186:	bf00      	nop
 8005188:	2000037c 	.word	0x2000037c

0800518c <__ssputs_r>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	688e      	ldr	r6, [r1, #8]
 8005192:	461f      	mov	r7, r3
 8005194:	42be      	cmp	r6, r7
 8005196:	680b      	ldr	r3, [r1, #0]
 8005198:	4682      	mov	sl, r0
 800519a:	460c      	mov	r4, r1
 800519c:	4690      	mov	r8, r2
 800519e:	d82d      	bhi.n	80051fc <__ssputs_r+0x70>
 80051a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051a8:	d026      	beq.n	80051f8 <__ssputs_r+0x6c>
 80051aa:	6965      	ldr	r5, [r4, #20]
 80051ac:	6909      	ldr	r1, [r1, #16]
 80051ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051b2:	eba3 0901 	sub.w	r9, r3, r1
 80051b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051ba:	1c7b      	adds	r3, r7, #1
 80051bc:	444b      	add	r3, r9
 80051be:	106d      	asrs	r5, r5, #1
 80051c0:	429d      	cmp	r5, r3
 80051c2:	bf38      	it	cc
 80051c4:	461d      	movcc	r5, r3
 80051c6:	0553      	lsls	r3, r2, #21
 80051c8:	d527      	bpl.n	800521a <__ssputs_r+0x8e>
 80051ca:	4629      	mov	r1, r5
 80051cc:	f7ff ff52 	bl	8005074 <_malloc_r>
 80051d0:	4606      	mov	r6, r0
 80051d2:	b360      	cbz	r0, 800522e <__ssputs_r+0xa2>
 80051d4:	6921      	ldr	r1, [r4, #16]
 80051d6:	464a      	mov	r2, r9
 80051d8:	f000 fae6 	bl	80057a8 <memcpy>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	6126      	str	r6, [r4, #16]
 80051ea:	6165      	str	r5, [r4, #20]
 80051ec:	444e      	add	r6, r9
 80051ee:	eba5 0509 	sub.w	r5, r5, r9
 80051f2:	6026      	str	r6, [r4, #0]
 80051f4:	60a5      	str	r5, [r4, #8]
 80051f6:	463e      	mov	r6, r7
 80051f8:	42be      	cmp	r6, r7
 80051fa:	d900      	bls.n	80051fe <__ssputs_r+0x72>
 80051fc:	463e      	mov	r6, r7
 80051fe:	6820      	ldr	r0, [r4, #0]
 8005200:	4632      	mov	r2, r6
 8005202:	4641      	mov	r1, r8
 8005204:	f000 faa6 	bl	8005754 <memmove>
 8005208:	68a3      	ldr	r3, [r4, #8]
 800520a:	1b9b      	subs	r3, r3, r6
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	4433      	add	r3, r6
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	2000      	movs	r0, #0
 8005216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521a:	462a      	mov	r2, r5
 800521c:	f000 fad2 	bl	80057c4 <_realloc_r>
 8005220:	4606      	mov	r6, r0
 8005222:	2800      	cmp	r0, #0
 8005224:	d1e0      	bne.n	80051e8 <__ssputs_r+0x5c>
 8005226:	6921      	ldr	r1, [r4, #16]
 8005228:	4650      	mov	r0, sl
 800522a:	f7ff feb7 	bl	8004f9c <_free_r>
 800522e:	230c      	movs	r3, #12
 8005230:	f8ca 3000 	str.w	r3, [sl]
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005240:	e7e9      	b.n	8005216 <__ssputs_r+0x8a>
	...

08005244 <_svfiprintf_r>:
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	4698      	mov	r8, r3
 800524a:	898b      	ldrh	r3, [r1, #12]
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	b09d      	sub	sp, #116	@ 0x74
 8005250:	4607      	mov	r7, r0
 8005252:	460d      	mov	r5, r1
 8005254:	4614      	mov	r4, r2
 8005256:	d510      	bpl.n	800527a <_svfiprintf_r+0x36>
 8005258:	690b      	ldr	r3, [r1, #16]
 800525a:	b973      	cbnz	r3, 800527a <_svfiprintf_r+0x36>
 800525c:	2140      	movs	r1, #64	@ 0x40
 800525e:	f7ff ff09 	bl	8005074 <_malloc_r>
 8005262:	6028      	str	r0, [r5, #0]
 8005264:	6128      	str	r0, [r5, #16]
 8005266:	b930      	cbnz	r0, 8005276 <_svfiprintf_r+0x32>
 8005268:	230c      	movs	r3, #12
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005270:	b01d      	add	sp, #116	@ 0x74
 8005272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005276:	2340      	movs	r3, #64	@ 0x40
 8005278:	616b      	str	r3, [r5, #20]
 800527a:	2300      	movs	r3, #0
 800527c:	9309      	str	r3, [sp, #36]	@ 0x24
 800527e:	2320      	movs	r3, #32
 8005280:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005284:	f8cd 800c 	str.w	r8, [sp, #12]
 8005288:	2330      	movs	r3, #48	@ 0x30
 800528a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005428 <_svfiprintf_r+0x1e4>
 800528e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005292:	f04f 0901 	mov.w	r9, #1
 8005296:	4623      	mov	r3, r4
 8005298:	469a      	mov	sl, r3
 800529a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800529e:	b10a      	cbz	r2, 80052a4 <_svfiprintf_r+0x60>
 80052a0:	2a25      	cmp	r2, #37	@ 0x25
 80052a2:	d1f9      	bne.n	8005298 <_svfiprintf_r+0x54>
 80052a4:	ebba 0b04 	subs.w	fp, sl, r4
 80052a8:	d00b      	beq.n	80052c2 <_svfiprintf_r+0x7e>
 80052aa:	465b      	mov	r3, fp
 80052ac:	4622      	mov	r2, r4
 80052ae:	4629      	mov	r1, r5
 80052b0:	4638      	mov	r0, r7
 80052b2:	f7ff ff6b 	bl	800518c <__ssputs_r>
 80052b6:	3001      	adds	r0, #1
 80052b8:	f000 80a7 	beq.w	800540a <_svfiprintf_r+0x1c6>
 80052bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052be:	445a      	add	r2, fp
 80052c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80052c2:	f89a 3000 	ldrb.w	r3, [sl]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 809f 	beq.w	800540a <_svfiprintf_r+0x1c6>
 80052cc:	2300      	movs	r3, #0
 80052ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d6:	f10a 0a01 	add.w	sl, sl, #1
 80052da:	9304      	str	r3, [sp, #16]
 80052dc:	9307      	str	r3, [sp, #28]
 80052de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80052e4:	4654      	mov	r4, sl
 80052e6:	2205      	movs	r2, #5
 80052e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ec:	484e      	ldr	r0, [pc, #312]	@ (8005428 <_svfiprintf_r+0x1e4>)
 80052ee:	f7fa ff97 	bl	8000220 <memchr>
 80052f2:	9a04      	ldr	r2, [sp, #16]
 80052f4:	b9d8      	cbnz	r0, 800532e <_svfiprintf_r+0xea>
 80052f6:	06d0      	lsls	r0, r2, #27
 80052f8:	bf44      	itt	mi
 80052fa:	2320      	movmi	r3, #32
 80052fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005300:	0711      	lsls	r1, r2, #28
 8005302:	bf44      	itt	mi
 8005304:	232b      	movmi	r3, #43	@ 0x2b
 8005306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800530a:	f89a 3000 	ldrb.w	r3, [sl]
 800530e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005310:	d015      	beq.n	800533e <_svfiprintf_r+0xfa>
 8005312:	9a07      	ldr	r2, [sp, #28]
 8005314:	4654      	mov	r4, sl
 8005316:	2000      	movs	r0, #0
 8005318:	f04f 0c0a 	mov.w	ip, #10
 800531c:	4621      	mov	r1, r4
 800531e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005322:	3b30      	subs	r3, #48	@ 0x30
 8005324:	2b09      	cmp	r3, #9
 8005326:	d94b      	bls.n	80053c0 <_svfiprintf_r+0x17c>
 8005328:	b1b0      	cbz	r0, 8005358 <_svfiprintf_r+0x114>
 800532a:	9207      	str	r2, [sp, #28]
 800532c:	e014      	b.n	8005358 <_svfiprintf_r+0x114>
 800532e:	eba0 0308 	sub.w	r3, r0, r8
 8005332:	fa09 f303 	lsl.w	r3, r9, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	9304      	str	r3, [sp, #16]
 800533a:	46a2      	mov	sl, r4
 800533c:	e7d2      	b.n	80052e4 <_svfiprintf_r+0xa0>
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	1d19      	adds	r1, r3, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	9103      	str	r1, [sp, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	bfbb      	ittet	lt
 800534a:	425b      	neglt	r3, r3
 800534c:	f042 0202 	orrlt.w	r2, r2, #2
 8005350:	9307      	strge	r3, [sp, #28]
 8005352:	9307      	strlt	r3, [sp, #28]
 8005354:	bfb8      	it	lt
 8005356:	9204      	strlt	r2, [sp, #16]
 8005358:	7823      	ldrb	r3, [r4, #0]
 800535a:	2b2e      	cmp	r3, #46	@ 0x2e
 800535c:	d10a      	bne.n	8005374 <_svfiprintf_r+0x130>
 800535e:	7863      	ldrb	r3, [r4, #1]
 8005360:	2b2a      	cmp	r3, #42	@ 0x2a
 8005362:	d132      	bne.n	80053ca <_svfiprintf_r+0x186>
 8005364:	9b03      	ldr	r3, [sp, #12]
 8005366:	1d1a      	adds	r2, r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	9203      	str	r2, [sp, #12]
 800536c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005370:	3402      	adds	r4, #2
 8005372:	9305      	str	r3, [sp, #20]
 8005374:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005438 <_svfiprintf_r+0x1f4>
 8005378:	7821      	ldrb	r1, [r4, #0]
 800537a:	2203      	movs	r2, #3
 800537c:	4650      	mov	r0, sl
 800537e:	f7fa ff4f 	bl	8000220 <memchr>
 8005382:	b138      	cbz	r0, 8005394 <_svfiprintf_r+0x150>
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	eba0 000a 	sub.w	r0, r0, sl
 800538a:	2240      	movs	r2, #64	@ 0x40
 800538c:	4082      	lsls	r2, r0
 800538e:	4313      	orrs	r3, r2
 8005390:	3401      	adds	r4, #1
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005398:	4824      	ldr	r0, [pc, #144]	@ (800542c <_svfiprintf_r+0x1e8>)
 800539a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800539e:	2206      	movs	r2, #6
 80053a0:	f7fa ff3e 	bl	8000220 <memchr>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d036      	beq.n	8005416 <_svfiprintf_r+0x1d2>
 80053a8:	4b21      	ldr	r3, [pc, #132]	@ (8005430 <_svfiprintf_r+0x1ec>)
 80053aa:	bb1b      	cbnz	r3, 80053f4 <_svfiprintf_r+0x1b0>
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	3307      	adds	r3, #7
 80053b0:	f023 0307 	bic.w	r3, r3, #7
 80053b4:	3308      	adds	r3, #8
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ba:	4433      	add	r3, r6
 80053bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80053be:	e76a      	b.n	8005296 <_svfiprintf_r+0x52>
 80053c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c4:	460c      	mov	r4, r1
 80053c6:	2001      	movs	r0, #1
 80053c8:	e7a8      	b.n	800531c <_svfiprintf_r+0xd8>
 80053ca:	2300      	movs	r3, #0
 80053cc:	3401      	adds	r4, #1
 80053ce:	9305      	str	r3, [sp, #20]
 80053d0:	4619      	mov	r1, r3
 80053d2:	f04f 0c0a 	mov.w	ip, #10
 80053d6:	4620      	mov	r0, r4
 80053d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053dc:	3a30      	subs	r2, #48	@ 0x30
 80053de:	2a09      	cmp	r2, #9
 80053e0:	d903      	bls.n	80053ea <_svfiprintf_r+0x1a6>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0c6      	beq.n	8005374 <_svfiprintf_r+0x130>
 80053e6:	9105      	str	r1, [sp, #20]
 80053e8:	e7c4      	b.n	8005374 <_svfiprintf_r+0x130>
 80053ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ee:	4604      	mov	r4, r0
 80053f0:	2301      	movs	r3, #1
 80053f2:	e7f0      	b.n	80053d6 <_svfiprintf_r+0x192>
 80053f4:	ab03      	add	r3, sp, #12
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	462a      	mov	r2, r5
 80053fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005434 <_svfiprintf_r+0x1f0>)
 80053fc:	a904      	add	r1, sp, #16
 80053fe:	4638      	mov	r0, r7
 8005400:	f3af 8000 	nop.w
 8005404:	1c42      	adds	r2, r0, #1
 8005406:	4606      	mov	r6, r0
 8005408:	d1d6      	bne.n	80053b8 <_svfiprintf_r+0x174>
 800540a:	89ab      	ldrh	r3, [r5, #12]
 800540c:	065b      	lsls	r3, r3, #25
 800540e:	f53f af2d 	bmi.w	800526c <_svfiprintf_r+0x28>
 8005412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005414:	e72c      	b.n	8005270 <_svfiprintf_r+0x2c>
 8005416:	ab03      	add	r3, sp, #12
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	462a      	mov	r2, r5
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <_svfiprintf_r+0x1f0>)
 800541e:	a904      	add	r1, sp, #16
 8005420:	4638      	mov	r0, r7
 8005422:	f000 f879 	bl	8005518 <_printf_i>
 8005426:	e7ed      	b.n	8005404 <_svfiprintf_r+0x1c0>
 8005428:	080058b0 	.word	0x080058b0
 800542c:	080058ba 	.word	0x080058ba
 8005430:	00000000 	.word	0x00000000
 8005434:	0800518d 	.word	0x0800518d
 8005438:	080058b6 	.word	0x080058b6

0800543c <_printf_common>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	4616      	mov	r6, r2
 8005442:	4698      	mov	r8, r3
 8005444:	688a      	ldr	r2, [r1, #8]
 8005446:	690b      	ldr	r3, [r1, #16]
 8005448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800544c:	4293      	cmp	r3, r2
 800544e:	bfb8      	it	lt
 8005450:	4613      	movlt	r3, r2
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005458:	4607      	mov	r7, r0
 800545a:	460c      	mov	r4, r1
 800545c:	b10a      	cbz	r2, 8005462 <_printf_common+0x26>
 800545e:	3301      	adds	r3, #1
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0699      	lsls	r1, r3, #26
 8005466:	bf42      	ittt	mi
 8005468:	6833      	ldrmi	r3, [r6, #0]
 800546a:	3302      	addmi	r3, #2
 800546c:	6033      	strmi	r3, [r6, #0]
 800546e:	6825      	ldr	r5, [r4, #0]
 8005470:	f015 0506 	ands.w	r5, r5, #6
 8005474:	d106      	bne.n	8005484 <_printf_common+0x48>
 8005476:	f104 0a19 	add.w	sl, r4, #25
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	6832      	ldr	r2, [r6, #0]
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	42ab      	cmp	r3, r5
 8005482:	dc26      	bgt.n	80054d2 <_printf_common+0x96>
 8005484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	3b00      	subs	r3, #0
 800548c:	bf18      	it	ne
 800548e:	2301      	movne	r3, #1
 8005490:	0692      	lsls	r2, r2, #26
 8005492:	d42b      	bmi.n	80054ec <_printf_common+0xb0>
 8005494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005498:	4641      	mov	r1, r8
 800549a:	4638      	mov	r0, r7
 800549c:	47c8      	blx	r9
 800549e:	3001      	adds	r0, #1
 80054a0:	d01e      	beq.n	80054e0 <_printf_common+0xa4>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	6922      	ldr	r2, [r4, #16]
 80054a6:	f003 0306 	and.w	r3, r3, #6
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf02      	ittt	eq
 80054ae:	68e5      	ldreq	r5, [r4, #12]
 80054b0:	6833      	ldreq	r3, [r6, #0]
 80054b2:	1aed      	subeq	r5, r5, r3
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	bf0c      	ite	eq
 80054b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054bc:	2500      	movne	r5, #0
 80054be:	4293      	cmp	r3, r2
 80054c0:	bfc4      	itt	gt
 80054c2:	1a9b      	subgt	r3, r3, r2
 80054c4:	18ed      	addgt	r5, r5, r3
 80054c6:	2600      	movs	r6, #0
 80054c8:	341a      	adds	r4, #26
 80054ca:	42b5      	cmp	r5, r6
 80054cc:	d11a      	bne.n	8005504 <_printf_common+0xc8>
 80054ce:	2000      	movs	r0, #0
 80054d0:	e008      	b.n	80054e4 <_printf_common+0xa8>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4652      	mov	r2, sl
 80054d6:	4641      	mov	r1, r8
 80054d8:	4638      	mov	r0, r7
 80054da:	47c8      	blx	r9
 80054dc:	3001      	adds	r0, #1
 80054de:	d103      	bne.n	80054e8 <_printf_common+0xac>
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	3501      	adds	r5, #1
 80054ea:	e7c6      	b.n	800547a <_printf_common+0x3e>
 80054ec:	18e1      	adds	r1, r4, r3
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	2030      	movs	r0, #48	@ 0x30
 80054f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054f6:	4422      	add	r2, r4
 80054f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005500:	3302      	adds	r3, #2
 8005502:	e7c7      	b.n	8005494 <_printf_common+0x58>
 8005504:	2301      	movs	r3, #1
 8005506:	4622      	mov	r2, r4
 8005508:	4641      	mov	r1, r8
 800550a:	4638      	mov	r0, r7
 800550c:	47c8      	blx	r9
 800550e:	3001      	adds	r0, #1
 8005510:	d0e6      	beq.n	80054e0 <_printf_common+0xa4>
 8005512:	3601      	adds	r6, #1
 8005514:	e7d9      	b.n	80054ca <_printf_common+0x8e>
	...

08005518 <_printf_i>:
 8005518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	7e0f      	ldrb	r7, [r1, #24]
 800551e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005520:	2f78      	cmp	r7, #120	@ 0x78
 8005522:	4691      	mov	r9, r2
 8005524:	4680      	mov	r8, r0
 8005526:	460c      	mov	r4, r1
 8005528:	469a      	mov	sl, r3
 800552a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800552e:	d807      	bhi.n	8005540 <_printf_i+0x28>
 8005530:	2f62      	cmp	r7, #98	@ 0x62
 8005532:	d80a      	bhi.n	800554a <_printf_i+0x32>
 8005534:	2f00      	cmp	r7, #0
 8005536:	f000 80d1 	beq.w	80056dc <_printf_i+0x1c4>
 800553a:	2f58      	cmp	r7, #88	@ 0x58
 800553c:	f000 80b8 	beq.w	80056b0 <_printf_i+0x198>
 8005540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005548:	e03a      	b.n	80055c0 <_printf_i+0xa8>
 800554a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800554e:	2b15      	cmp	r3, #21
 8005550:	d8f6      	bhi.n	8005540 <_printf_i+0x28>
 8005552:	a101      	add	r1, pc, #4	@ (adr r1, 8005558 <_printf_i+0x40>)
 8005554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005558:	080055b1 	.word	0x080055b1
 800555c:	080055c5 	.word	0x080055c5
 8005560:	08005541 	.word	0x08005541
 8005564:	08005541 	.word	0x08005541
 8005568:	08005541 	.word	0x08005541
 800556c:	08005541 	.word	0x08005541
 8005570:	080055c5 	.word	0x080055c5
 8005574:	08005541 	.word	0x08005541
 8005578:	08005541 	.word	0x08005541
 800557c:	08005541 	.word	0x08005541
 8005580:	08005541 	.word	0x08005541
 8005584:	080056c3 	.word	0x080056c3
 8005588:	080055ef 	.word	0x080055ef
 800558c:	0800567d 	.word	0x0800567d
 8005590:	08005541 	.word	0x08005541
 8005594:	08005541 	.word	0x08005541
 8005598:	080056e5 	.word	0x080056e5
 800559c:	08005541 	.word	0x08005541
 80055a0:	080055ef 	.word	0x080055ef
 80055a4:	08005541 	.word	0x08005541
 80055a8:	08005541 	.word	0x08005541
 80055ac:	08005685 	.word	0x08005685
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6032      	str	r2, [r6, #0]
 80055b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055c0:	2301      	movs	r3, #1
 80055c2:	e09c      	b.n	80056fe <_printf_i+0x1e6>
 80055c4:	6833      	ldr	r3, [r6, #0]
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	1d19      	adds	r1, r3, #4
 80055ca:	6031      	str	r1, [r6, #0]
 80055cc:	0606      	lsls	r6, r0, #24
 80055ce:	d501      	bpl.n	80055d4 <_printf_i+0xbc>
 80055d0:	681d      	ldr	r5, [r3, #0]
 80055d2:	e003      	b.n	80055dc <_printf_i+0xc4>
 80055d4:	0645      	lsls	r5, r0, #25
 80055d6:	d5fb      	bpl.n	80055d0 <_printf_i+0xb8>
 80055d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055dc:	2d00      	cmp	r5, #0
 80055de:	da03      	bge.n	80055e8 <_printf_i+0xd0>
 80055e0:	232d      	movs	r3, #45	@ 0x2d
 80055e2:	426d      	negs	r5, r5
 80055e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e8:	4858      	ldr	r0, [pc, #352]	@ (800574c <_printf_i+0x234>)
 80055ea:	230a      	movs	r3, #10
 80055ec:	e011      	b.n	8005612 <_printf_i+0xfa>
 80055ee:	6821      	ldr	r1, [r4, #0]
 80055f0:	6833      	ldr	r3, [r6, #0]
 80055f2:	0608      	lsls	r0, r1, #24
 80055f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80055f8:	d402      	bmi.n	8005600 <_printf_i+0xe8>
 80055fa:	0649      	lsls	r1, r1, #25
 80055fc:	bf48      	it	mi
 80055fe:	b2ad      	uxthmi	r5, r5
 8005600:	2f6f      	cmp	r7, #111	@ 0x6f
 8005602:	4852      	ldr	r0, [pc, #328]	@ (800574c <_printf_i+0x234>)
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	bf14      	ite	ne
 8005608:	230a      	movne	r3, #10
 800560a:	2308      	moveq	r3, #8
 800560c:	2100      	movs	r1, #0
 800560e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005612:	6866      	ldr	r6, [r4, #4]
 8005614:	60a6      	str	r6, [r4, #8]
 8005616:	2e00      	cmp	r6, #0
 8005618:	db05      	blt.n	8005626 <_printf_i+0x10e>
 800561a:	6821      	ldr	r1, [r4, #0]
 800561c:	432e      	orrs	r6, r5
 800561e:	f021 0104 	bic.w	r1, r1, #4
 8005622:	6021      	str	r1, [r4, #0]
 8005624:	d04b      	beq.n	80056be <_printf_i+0x1a6>
 8005626:	4616      	mov	r6, r2
 8005628:	fbb5 f1f3 	udiv	r1, r5, r3
 800562c:	fb03 5711 	mls	r7, r3, r1, r5
 8005630:	5dc7      	ldrb	r7, [r0, r7]
 8005632:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005636:	462f      	mov	r7, r5
 8005638:	42bb      	cmp	r3, r7
 800563a:	460d      	mov	r5, r1
 800563c:	d9f4      	bls.n	8005628 <_printf_i+0x110>
 800563e:	2b08      	cmp	r3, #8
 8005640:	d10b      	bne.n	800565a <_printf_i+0x142>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	07df      	lsls	r7, r3, #31
 8005646:	d508      	bpl.n	800565a <_printf_i+0x142>
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	6861      	ldr	r1, [r4, #4]
 800564c:	4299      	cmp	r1, r3
 800564e:	bfde      	ittt	le
 8005650:	2330      	movle	r3, #48	@ 0x30
 8005652:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005656:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800565a:	1b92      	subs	r2, r2, r6
 800565c:	6122      	str	r2, [r4, #16]
 800565e:	f8cd a000 	str.w	sl, [sp]
 8005662:	464b      	mov	r3, r9
 8005664:	aa03      	add	r2, sp, #12
 8005666:	4621      	mov	r1, r4
 8005668:	4640      	mov	r0, r8
 800566a:	f7ff fee7 	bl	800543c <_printf_common>
 800566e:	3001      	adds	r0, #1
 8005670:	d14a      	bne.n	8005708 <_printf_i+0x1f0>
 8005672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005676:	b004      	add	sp, #16
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	f043 0320 	orr.w	r3, r3, #32
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	4832      	ldr	r0, [pc, #200]	@ (8005750 <_printf_i+0x238>)
 8005686:	2778      	movs	r7, #120	@ 0x78
 8005688:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	061f      	lsls	r7, r3, #24
 8005692:	f851 5b04 	ldr.w	r5, [r1], #4
 8005696:	d402      	bmi.n	800569e <_printf_i+0x186>
 8005698:	065f      	lsls	r7, r3, #25
 800569a:	bf48      	it	mi
 800569c:	b2ad      	uxthmi	r5, r5
 800569e:	6031      	str	r1, [r6, #0]
 80056a0:	07d9      	lsls	r1, r3, #31
 80056a2:	bf44      	itt	mi
 80056a4:	f043 0320 	orrmi.w	r3, r3, #32
 80056a8:	6023      	strmi	r3, [r4, #0]
 80056aa:	b11d      	cbz	r5, 80056b4 <_printf_i+0x19c>
 80056ac:	2310      	movs	r3, #16
 80056ae:	e7ad      	b.n	800560c <_printf_i+0xf4>
 80056b0:	4826      	ldr	r0, [pc, #152]	@ (800574c <_printf_i+0x234>)
 80056b2:	e7e9      	b.n	8005688 <_printf_i+0x170>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f023 0320 	bic.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	e7f6      	b.n	80056ac <_printf_i+0x194>
 80056be:	4616      	mov	r6, r2
 80056c0:	e7bd      	b.n	800563e <_printf_i+0x126>
 80056c2:	6833      	ldr	r3, [r6, #0]
 80056c4:	6825      	ldr	r5, [r4, #0]
 80056c6:	6961      	ldr	r1, [r4, #20]
 80056c8:	1d18      	adds	r0, r3, #4
 80056ca:	6030      	str	r0, [r6, #0]
 80056cc:	062e      	lsls	r6, r5, #24
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	d501      	bpl.n	80056d6 <_printf_i+0x1be>
 80056d2:	6019      	str	r1, [r3, #0]
 80056d4:	e002      	b.n	80056dc <_printf_i+0x1c4>
 80056d6:	0668      	lsls	r0, r5, #25
 80056d8:	d5fb      	bpl.n	80056d2 <_printf_i+0x1ba>
 80056da:	8019      	strh	r1, [r3, #0]
 80056dc:	2300      	movs	r3, #0
 80056de:	6123      	str	r3, [r4, #16]
 80056e0:	4616      	mov	r6, r2
 80056e2:	e7bc      	b.n	800565e <_printf_i+0x146>
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	6032      	str	r2, [r6, #0]
 80056ea:	681e      	ldr	r6, [r3, #0]
 80056ec:	6862      	ldr	r2, [r4, #4]
 80056ee:	2100      	movs	r1, #0
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7fa fd95 	bl	8000220 <memchr>
 80056f6:	b108      	cbz	r0, 80056fc <_printf_i+0x1e4>
 80056f8:	1b80      	subs	r0, r0, r6
 80056fa:	6060      	str	r0, [r4, #4]
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	2300      	movs	r3, #0
 8005702:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005706:	e7aa      	b.n	800565e <_printf_i+0x146>
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	4632      	mov	r2, r6
 800570c:	4649      	mov	r1, r9
 800570e:	4640      	mov	r0, r8
 8005710:	47d0      	blx	sl
 8005712:	3001      	adds	r0, #1
 8005714:	d0ad      	beq.n	8005672 <_printf_i+0x15a>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	079b      	lsls	r3, r3, #30
 800571a:	d413      	bmi.n	8005744 <_printf_i+0x22c>
 800571c:	68e0      	ldr	r0, [r4, #12]
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	4298      	cmp	r0, r3
 8005722:	bfb8      	it	lt
 8005724:	4618      	movlt	r0, r3
 8005726:	e7a6      	b.n	8005676 <_printf_i+0x15e>
 8005728:	2301      	movs	r3, #1
 800572a:	4632      	mov	r2, r6
 800572c:	4649      	mov	r1, r9
 800572e:	4640      	mov	r0, r8
 8005730:	47d0      	blx	sl
 8005732:	3001      	adds	r0, #1
 8005734:	d09d      	beq.n	8005672 <_printf_i+0x15a>
 8005736:	3501      	adds	r5, #1
 8005738:	68e3      	ldr	r3, [r4, #12]
 800573a:	9903      	ldr	r1, [sp, #12]
 800573c:	1a5b      	subs	r3, r3, r1
 800573e:	42ab      	cmp	r3, r5
 8005740:	dcf2      	bgt.n	8005728 <_printf_i+0x210>
 8005742:	e7eb      	b.n	800571c <_printf_i+0x204>
 8005744:	2500      	movs	r5, #0
 8005746:	f104 0619 	add.w	r6, r4, #25
 800574a:	e7f5      	b.n	8005738 <_printf_i+0x220>
 800574c:	080058c1 	.word	0x080058c1
 8005750:	080058d2 	.word	0x080058d2

08005754 <memmove>:
 8005754:	4288      	cmp	r0, r1
 8005756:	b510      	push	{r4, lr}
 8005758:	eb01 0402 	add.w	r4, r1, r2
 800575c:	d902      	bls.n	8005764 <memmove+0x10>
 800575e:	4284      	cmp	r4, r0
 8005760:	4623      	mov	r3, r4
 8005762:	d807      	bhi.n	8005774 <memmove+0x20>
 8005764:	1e43      	subs	r3, r0, #1
 8005766:	42a1      	cmp	r1, r4
 8005768:	d008      	beq.n	800577c <memmove+0x28>
 800576a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800576e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005772:	e7f8      	b.n	8005766 <memmove+0x12>
 8005774:	4402      	add	r2, r0
 8005776:	4601      	mov	r1, r0
 8005778:	428a      	cmp	r2, r1
 800577a:	d100      	bne.n	800577e <memmove+0x2a>
 800577c:	bd10      	pop	{r4, pc}
 800577e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005786:	e7f7      	b.n	8005778 <memmove+0x24>

08005788 <_sbrk_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4d06      	ldr	r5, [pc, #24]	@ (80057a4 <_sbrk_r+0x1c>)
 800578c:	2300      	movs	r3, #0
 800578e:	4604      	mov	r4, r0
 8005790:	4608      	mov	r0, r1
 8005792:	602b      	str	r3, [r5, #0]
 8005794:	f7fb fa5c 	bl	8000c50 <_sbrk>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_sbrk_r+0x1a>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_sbrk_r+0x1a>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	20000378 	.word	0x20000378

080057a8 <memcpy>:
 80057a8:	440a      	add	r2, r1
 80057aa:	4291      	cmp	r1, r2
 80057ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80057b0:	d100      	bne.n	80057b4 <memcpy+0xc>
 80057b2:	4770      	bx	lr
 80057b4:	b510      	push	{r4, lr}
 80057b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057be:	4291      	cmp	r1, r2
 80057c0:	d1f9      	bne.n	80057b6 <memcpy+0xe>
 80057c2:	bd10      	pop	{r4, pc}

080057c4 <_realloc_r>:
 80057c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c8:	4607      	mov	r7, r0
 80057ca:	4614      	mov	r4, r2
 80057cc:	460d      	mov	r5, r1
 80057ce:	b921      	cbnz	r1, 80057da <_realloc_r+0x16>
 80057d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d4:	4611      	mov	r1, r2
 80057d6:	f7ff bc4d 	b.w	8005074 <_malloc_r>
 80057da:	b92a      	cbnz	r2, 80057e8 <_realloc_r+0x24>
 80057dc:	f7ff fbde 	bl	8004f9c <_free_r>
 80057e0:	4625      	mov	r5, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e8:	f000 f81a 	bl	8005820 <_malloc_usable_size_r>
 80057ec:	4284      	cmp	r4, r0
 80057ee:	4606      	mov	r6, r0
 80057f0:	d802      	bhi.n	80057f8 <_realloc_r+0x34>
 80057f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057f6:	d8f4      	bhi.n	80057e2 <_realloc_r+0x1e>
 80057f8:	4621      	mov	r1, r4
 80057fa:	4638      	mov	r0, r7
 80057fc:	f7ff fc3a 	bl	8005074 <_malloc_r>
 8005800:	4680      	mov	r8, r0
 8005802:	b908      	cbnz	r0, 8005808 <_realloc_r+0x44>
 8005804:	4645      	mov	r5, r8
 8005806:	e7ec      	b.n	80057e2 <_realloc_r+0x1e>
 8005808:	42b4      	cmp	r4, r6
 800580a:	4622      	mov	r2, r4
 800580c:	4629      	mov	r1, r5
 800580e:	bf28      	it	cs
 8005810:	4632      	movcs	r2, r6
 8005812:	f7ff ffc9 	bl	80057a8 <memcpy>
 8005816:	4629      	mov	r1, r5
 8005818:	4638      	mov	r0, r7
 800581a:	f7ff fbbf 	bl	8004f9c <_free_r>
 800581e:	e7f1      	b.n	8005804 <_realloc_r+0x40>

08005820 <_malloc_usable_size_r>:
 8005820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005824:	1f18      	subs	r0, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	bfbc      	itt	lt
 800582a:	580b      	ldrlt	r3, [r1, r0]
 800582c:	18c0      	addlt	r0, r0, r3
 800582e:	4770      	bx	lr

08005830 <_init>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr

0800583c <_fini>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr
